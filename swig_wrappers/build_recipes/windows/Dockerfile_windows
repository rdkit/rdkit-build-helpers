
# Build Windows RDKit Java and C# DLLs for ARCH, where ARCH={x86_64|i686}

ARG ARCH="x86_64"
ARG DEPS="/deps"
ARG WORK="/work"
ARG SRC="/src"
ARG IMAGE="/image"
ARG RDKIT_RELEASE="2023_09_2"
ARG RDKIT_CHKSUM="965c0f329b5c0cab557a7c308dff8fcf"
ARG RDKIT_GIT_URL="https://github.com/rdkit/rdkit"
#ARG RDKIT_BRANCH="minimallib"

FROM fedora:36 AS build-stage-prep
ARG ARCH
ARG DEPS
ARG WORK
ARG SRC
ARG IMAGE
ARG RDKIT_RELEASE
ARG RDKIT_CHKSUM
ARG RDKIT_GIT_URL
ARG RDKIT_BRANCH

RUN echo "Building Windows ${ARCH} Java and C# DLLs"
RUN [ "${ARCH}" = x86_64 ] || [ "${ARCH}" = i686 ] || \
    ( echo "FAILED - please set ARCH to x86_64 or i686." 1>&2 && exit 1 )

USER root

RUN dnf update -y
RUN dnf install -y patch bzip2 ca-certificates openssl openssl-devel java-1.8.0-openjdk-devel \
    mono-devel make gcc gcc-c++ git

RUN groupadd -g 1005 docker && \
    useradd -u 1005 -s /bin/bash -g docker docker && \
    mkdir ${SRC} ${WORK} ${IMAGE} ${DEPS} && \
    chown -R docker:docker ${SRC} ${WORK} ${IMAGE} ${DEPS}
RUN mkdir -p /home/docker && chown docker:docker /home/docker
USER docker

FROM build-stage-prep AS build-stage-x86_64
ARG ARCH
ENV BITS="64"
ENV ZLIB_ARCH_SWITCH="--64"
ENV SWIG_STDCALL_SWITCH=""

FROM build-stage-prep AS build-stage-i686
ARG ARCH
ENV BITS="32"
ENV ZLIB_ARCH_SWITCH=""
ENV SWIG_STDCALL_SWITCH="-Wl,--add-stdcall-alias"

FROM build-stage-${ARCH} AS build-stage
ARG ARCH

USER root
RUN dnf install -y mingw${BITS}-gcc mingw${BITS}-gcc-c++ mingw${BITS}-runtime mingw${BITS}-winpthreads-static
USER docker

ARG DEPS
ARG WORK
ARG SRC
ARG IMAGE
ARG BUILD_CONCURRENCY="6"
ARG RDKIT_RELEASE
ARG RDKIT_CHKSUM
ARG RDKIT_GIT_URL
ARG RDKIT_BRANCH
ARG ZLIB_VERSION="1.3"
ARG ZLIB_CHKSUM="ff0ba4c292013dbc27530b3a81e1f9a813cd39de01ca5e0f8bf355702efa593e"
ARG BZIP2_VERSION="1.0.8"
ARG BZIP2_CHKSUM="67e051268d0c475ea773822f7500d0e5"
ARG BOOST_VERSION="1_83_0"
ARG BOOST_CHKSUM="6478edfe2f3305127cffe8caf73ea0176c53769f4bf1585be237eb30798c3b8e"
ARG CMAKE_VERSION="3.27.7"
ARG CMAKE_CHKSUM="0f11cf15c7f2fa6234b9fc415c78029c"
ARG EIGEN_VERSION="3.4.0"
ARG EIGEN_CHKSUM="132dde48fe2b563211675626d29f1707"
ARG FREETYPE_VERSION="2.13.2"
ARG FREETYPE_CHKSUM="d99447cf00c5f2679918f66f2b5771f6"
ARG SWIG_VERSION="3.0.12"
ARG SWIG_CHKSUM="82133dfa7bba75ff9ad98a7046be687c"
ARG LIBPNG_VERSION="1.6.40"
ARG LIBPNG_CHKSUM="8f720b363aa08683c9bf2a563236f45313af2c55d542b5481ae17dd8d183bb42"
ARG PIXMAN_VERSION="0.42.2"
ARG PIXMAN_CHKSUM="0a4e327aef89c25f8cb474fbd01de834fd2a1b13fdf7db11ab72072082e45881cd16060673b59d02054b1711ae69c6e2395f6ae9214225ee7153939efcd2fa5d"
ARG CAIRO_VERSION="1.16.0"
ARG CAIRO_CHKSUM="00e81842ae5e81bb0343108884eb5205be0eac14" #sha1

RUN mkdir -p ${WORK}/boost ${WORK}/cmake ${WORK}/eigen ${WORK}/zlib ${WORK}/bzip2 ${WORK}/freetype ${WORK}/swig ${WORK}/cairo

WORKDIR ${WORK}/zlib
RUN curl -L -O https://zlib.net/zlib-${ZLIB_VERSION}.tar.gz && \
    [ `sha256sum zlib-${ZLIB_VERSION}.tar.gz | awk '{print $1}'` = ${ZLIB_CHKSUM} ] || \
    ( >&2 echo "Failed to download zlib" && exit 1 )
RUN tar xzf zlib-${ZLIB_VERSION}.tar.gz
WORKDIR ${WORK}/zlib/zlib-${ZLIB_VERSION}
RUN AR="${ARCH}-w64-mingw32-ar" CC="${ARCH}-w64-mingw32-gcc -fPIC" ./configure --static ${ZLIB_ARCH_SWITCH} --prefix=${DEPS}
RUN make -j${BUILD_CONCURRENCY} && make -j${BUILD_CONCURRENCY} install

WORKDIR ${WORK}/bzip2
RUN curl -L -O https://sourceware.org/pub/bzip2/bzip2-${BZIP2_VERSION}.tar.gz && \
    [ `md5sum bzip2-${BZIP2_VERSION}.tar.gz | awk '{print $1}'` = ${BZIP2_CHKSUM} ] || \
    ( >&2 echo "Failed to download bzip2" && exit 1 )
RUN tar xzf bzip2-${BZIP2_VERSION}.tar.gz
WORKDIR ${WORK}/bzip2/bzip2-${BZIP2_VERSION}
RUN make AR="${ARCH}-w64-mingw32-ar" CC="${ARCH}-w64-mingw32-gcc -fPIC" PREFIX=${DEPS} -j${BUILD_CONCURRENCY} libbz2.a
RUN cp bzlib.h ${DEPS}/include && cp libbz2.a ${DEPS}/lib

WORKDIR ${WORK}/boost
RUN curl -L -O https://boostorg.jfrog.io/artifactory/main/release/`echo ${BOOST_VERSION} | sed "s|_|.|g"`/source/boost_${BOOST_VERSION}.tar.bz2 && \
    [ `sha256sum boost_${BOOST_VERSION}.tar.bz2 | awk '{print $1}'` = ${BOOST_CHKSUM} ] || \
    ( >&2 echo "Failed to download boost" && exit 1 )
RUN tar xjf boost_${BOOST_VERSION}.tar.bz2
WORKDIR ${WORK}/boost/boost_${BOOST_VERSION}
RUN echo "using gcc : mingw : ${ARCH}-w64-mingw32-g++ ;" > user-config.jam
RUN ./bootstrap.sh --with-toolset=gcc \
    --with-libraries=serialization,iostreams,regex,system --without-icu --prefix=${DEPS}
RUN ./b2 --user-config=./user-config.jam toolset=gcc-mingw \
        target-os=windows address-model=${BITS} architecture=x86 \
        cflags=-fPIC cxxflags=-fPIC --prefix=${WORK}/boost/install variant=release link=static \
        --with-serialization --with-iostreams --with-regex --with-system \
        -sBZIP2_INCLUDE=${DEPS}/include -sBZIP2_LIBPATH=${DEPS}/lib \
        -sZLIB_INCLUDE=${DEPS}/include -sZLIB_LIBPATH=${DEPS}/lib && \
        cp -R stage/lib ${DEPS} && cp -R boost ${DEPS}/include

WORKDIR ${WORK}/cmake
RUN curl -L -O https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}.tar.gz && \
    [ `md5sum cmake-${CMAKE_VERSION}.tar.gz | awk '{print $1}'` = ${CMAKE_CHKSUM} ] || \
    ( >&2 echo "Failed to download cmake" && exit 1 )
RUN tar xzf cmake-${CMAKE_VERSION}.tar.gz
WORKDIR ${WORK}/cmake/cmake-${CMAKE_VERSION}
RUN ./bootstrap --prefix=${DEPS} --parallel=${BUILD_CONCURRENCY}
RUN make -j${BUILD_CONCURRENCY} && make -j${BUILD_CONCURRENCY} install

WORKDIR ${WORK}/eigen
RUN curl -L -o eigen-${EIGEN_VERSION}.tar.bz2 https://gitlab.com/libeigen/eigen/-/archive/${EIGEN_VERSION}/eigen-${EIGEN_VERSION}.tar.bz2 && \
    [ `md5sum eigen-${EIGEN_VERSION}.tar.bz2 | awk '{print $1}'` = ${EIGEN_CHKSUM} ] || \
    ( >&2 echo "Failed to download eigen" && exit 1 )
RUN tar xjf eigen-${EIGEN_VERSION}.tar.bz2
WORKDIR ${WORK}/eigen/eigen-${EIGEN_VERSION}
RUN mkdir build
WORKDIR ${WORK}/eigen/eigen-${EIGEN_VERSION}/build
RUN ${DEPS}/bin/cmake -DCMAKE_INSTALL_PREFIX=${DEPS} ..
RUN make -j${BUILD_CONCURRENCY} install

RUN mkdir -p ${WORK}/swig
WORKDIR ${WORK}/swig
RUN rm -f swig-${SWIG_VERSION}.tar.gz
# Occasionally files downloaded from SourceForge are corrupted, so we try up to 5 times
RUN for i in `seq 1 5`; do \
        curl -L -o swig-${SWIG_VERSION}.tar.gz https://sourceforge.net/projects/swig/files/swig/swig-${SWIG_VERSION}/swig-${SWIG_VERSION}.tar.gz/download && \
        [ `md5sum swig-${SWIG_VERSION}.tar.gz | awk '{print $1}'` = ${SWIG_CHKSUM} ] && touch swig_md5_ok && break; \
    done
RUN test -e swig_md5_ok || ( >&2 echo "Failed to download SWIG" && exit 1 )
RUN tar xzf swig-${SWIG_VERSION}.tar.gz
WORKDIR ${WORK}/swig/swig-${SWIG_VERSION}
RUN ./configure --prefix=${DEPS}
RUN make -j${BUILD_CONCURRENCY} && make -j${BUILD_CONCURRENCY} install

RUN mkdir -p ${WORK}/freetype
WORKDIR ${WORK}/freetype
RUN curl -L -O https://download.savannah.gnu.org/releases/freetype/freetype-${FREETYPE_VERSION}.tar.gz && \
    [ `md5sum freetype-${FREETYPE_VERSION}.tar.gz | awk '{print $1}'` = ${FREETYPE_CHKSUM} ] || \
    ( >&2 echo "Failed to download freetype" && exit 1 )
RUN tar xzf freetype-${FREETYPE_VERSION}.tar.gz
WORKDIR ${WORK}/freetype/freetype-${FREETYPE_VERSION}
RUN CC="${ARCH}-w64-mingw32-gcc -fPIC -I${DEPS}/include" \
    CXX="${ARCH}-w64-mingw32-g++ -fPIC -I${DEPS}/include" AR="${ARCH}-w64-mingw32-ar" \
    LDFLAGS="-L${DEPS}/lib" PKG_CONFIG_PATH=${DEPS}/lib/pkgconfig \
    ./configure --host=${ARCH}-w64-mingw32 --build=${ARCH}-pc-linux-gnu \
    --enable-static=yes --enable-shared=no --prefix=${DEPS}
RUN make -j${BUILD_CONCURRENCY} && make -j${BUILD_CONCURRENCY} install

WORKDIR ${WORK}/cairo
RUN for i in `seq 1 5`; do \
        curl -L -O https://download.sourceforge.net/libpng/libpng-${LIBPNG_VERSION}.tar.gz && \
        [ `sha256sum libpng-${LIBPNG_VERSION}.tar.gz | awk '{print $1}'` = ${LIBPNG_CHKSUM} ] && touch libpng_sha256_ok && break; \
    done
RUN test -e libpng_sha256_ok || ( >&2 echo "Failed to download libpng" && exit 1 )
RUN tar xzf libpng-${LIBPNG_VERSION}.tar.gz
WORKDIR ${WORK}/cairo/libpng-${LIBPNG_VERSION}
RUN CC="${ARCH}-w64-mingw32-gcc -fPIC -I${DEPS}/include" AR="${ARCH}-w64-mingw32-ar" \
    LDFLAGS="-L${DEPS}/lib" PKG_CONFIG_PATH=${DEPS}/lib/pkgconfig \
    ./configure --host=${ARCH}-w64-mingw32 --build=${ARCH}-pc-linux-gnu \
    --enable-shared=no --enable-static=yes --prefix=${DEPS}
RUN make -j${BUILD_CONCURRENCY} && make -j${BUILD_CONCURRENCY} install

WORKDIR ${WORK}/cairo
RUN curl -L -O https://www.cairographics.org/releases/pixman-${PIXMAN_VERSION}.tar.gz && \
    [ `sha512sum pixman-${PIXMAN_VERSION}.tar.gz | awk '{print $1}'` = ${PIXMAN_CHKSUM} ] || \
    ( >&2 echo "Failed to download pixman" && exit 1 )
RUN tar xzf pixman-${PIXMAN_VERSION}.tar.gz
WORKDIR ${WORK}/cairo/pixman-${PIXMAN_VERSION}
RUN CC="${ARCH}-w64-mingw32-gcc -fPIC -I${DEPS}/include" AR="${ARCH}-w64-mingw32-ar" \
    LDFLAGS="-L${DEPS}/lib" PKG_CONFIG_PATH=${DEPS}/lib/pkgconfig \
    ./configure --host=${ARCH}-w64-mingw32 --build=${ARCH}-pc-linux-gnu \
    --enable-shared=no --enable-static=yes --prefix=${DEPS}
RUN make -j${BUILD_CONCURRENCY} && make -j${BUILD_CONCURRENCY} install

WORKDIR ${WORK}/cairo
RUN curl -L -O https://www.cairographics.org/releases/cairo-${CAIRO_VERSION}.tar.xz && \
    [ `sha1sum cairo-${CAIRO_VERSION}.tar.xz | awk '{print $1}'` = ${CAIRO_CHKSUM} ] || \
    ( >&2 echo "Failed to download cairo" && exit 1 )
RUN tar xJf cairo-${CAIRO_VERSION}.tar.xz
WORKDIR ${WORK}/cairo/cairo-${CAIRO_VERSION}
RUN CC="${ARCH}-w64-mingw32-gcc -fPIC -I${DEPS}/include" \
    CXX="${ARCH}-w64-mingw32-g++ -fPIC -I${DEPS}/include" AR="${ARCH}-w64-mingw32-ar" \
    PKG_CONFIG_PATH=${DEPS}/lib/pkgconfig LDFLAGS="-L${DEPS}/lib -Bstatic -lssp -Bdynamic" \
    ./configure --host=${ARCH}-w64-mingw32 --build=${ARCH}-pc-linux-gnu \
    --enable-shared=no --enable-static=yes --prefix=${DEPS}
RUN make -j${BUILD_CONCURRENCY} && make -j${BUILD_CONCURRENCY} install

WORKDIR ${SRC}
RUN if [ -n "${RDKIT_RELEASE}" ]; then \
        curl -L -O ${RDKIT_GIT_URL}/archive/refs/tags/Release_${RDKIT_RELEASE}.tar.gz && \
            [ `md5sum Release_${RDKIT_RELEASE}.tar.gz | awk '{print $1}'` = ${RDKIT_CHKSUM} ] || \
            ( >&2 echo "Failed to download RDKit" && exit 1 ); \
        tar xzf Release_${RDKIT_RELEASE}.tar.gz && \
        ln -s rdkit-Release_${RDKIT_RELEASE} rdkit; \
    else \
        git clone ${RDKIT_GIT_URL}.git && cd rdkit && git checkout ${RDKIT_BRANCH}; \
    fi
WORKDIR ${SRC}/rdkit
RUN sed -i -e "s|\( *\)\(target_link_libraries(MolDraw2D PUBLIC \)\(Cairo::Cairo\)|\1target_include_directories(MolDraw2D PUBLIC ${DEPS}/include/cairo)\n\1\2 ${DEPS}/lib/libcairo.a /usr/${ARCH}-w64-mingw32/sys-root/mingw/lib/libssp.a ${DEPS}/lib/libpixman-1.a ${DEPS}/lib/libpng16.a|" \
    -e "s|\( *\)\(target_link_libraries(MolDraw2D PUBLIC \)\(.*\)\()\)|\1\2\3 ${DEPS}/lib/libz.a ${DEPS}/lib/libbz2.a\4|" \
    Code/GraphMol/MolDraw2D/CMakeLists.txt
RUN sed -i "s|^\( *set(RDKit_SERIALIZATION_LIBS *\${Boost_SERIALIZATION_LIBRARY}\)\()\)|\1 ${DEPS}/lib/libz.a ${DEPS}/lib/libbz2.a\2|" \
    Code/GraphMol/ChemReactions/CMakeLists.txt
RUN sed -i -e "s|if(WIN32)|if(FALSE)|" \
    -e "s|\(SWIG_LINK_LIBRARIES *( *\)\(GraphMolWrap *\)\(\${RDKit_Wrapper_Libs}\)|set(RDKit_Wrapper_Libs \"-Wl,--no-undefined;\${RDKit_Wrapper_Libs};${DEPS}/lib/libcairo.a;${DEPS}/lib/libpixman-1.a;${DEPS}/lib/libpng16.a;${DEPS}/lib/libz.a;${DEPS}/lib/libbz2.a\")\n\1\2-static -static-libgcc -static-libstdc++ ${SWIG_STDCALL_SWITCH} \3 /usr/${ARCH}-w64-mingw32/sys-root/mingw/lib/libssp.a|" \
    Code/JavaWrappers/gmwrapper/CMakeLists.txt
RUN sed -i "s|\(SWIG_LINK_LIBRARIES *( *\)\(RDKFuncs *\)\(\${RDKit_Wrapper_Libs}\)|set(RDKit_Wrapper_Libs \"-Wl,--no-undefined;\${RDKit_Wrapper_Libs};${DEPS}/lib/libcairo.a;${DEPS}/lib/libpixman-1.a;${DEPS}/lib/libpng16.a;${DEPS}/lib/libz.a;${DEPS}/lib/libbz2.a\")\n\1\2-static -static-libgcc -static-libstdc++ ${SWIG_STDCALL_SWITCH} \3 /usr/${ARCH}-w64-mingw32/sys-root/mingw/lib/libssp.a|" \
    Code/JavaWrappers/csharp_wrapper/CMakeLists.txt

# Patch for Avalon
RUN sed -i -e "s|\(AVALONTOOLS_MD5SUM \)\"7a20c25a7e79f3344e0f9f49afa03351\"|\1\"1e74ea31cd5af4377255eb9b339c9003\"|" \
    -e "s|\(AVALON_VERSION \)\"2\.0\.5-pre\.3\"|\1\"2.0.6-pre1\"|" \
    -e "s|\(AVALONTOOLS_URL \"https://github.com/\)rohdebe1\(/ava-formake/archive/refs/tags/AvalonToolkit_\${AVALON_VERSION}.tar.gz\"\)|\1rdkit\2|" \
    External/AvalonTools/CMakeLists.txt

RUN echo > win-${ARCH}.cmake -e \
    "set(CMAKE_SYSTEM_NAME Windows)\n" \
    "set(CMAKE_SYSTEM_VERSION 1)\n" \
    "set(CMAKE_SYSTEM_PROCESSOR ${ARCH})\n" \
    "set(TOOLCHAIN_PREFIX ${ARCH}-w64-mingw32)\n" \
    "\n" \
    "set(CMAKE_C_COMPILER     "\${TOOLCHAIN_PREFIX}-gcc")\n" \
    "set(CMAKE_CXX_COMPILER   "\${TOOLCHAIN_PREFIX}-g++")\n" \
    "\n" \
    "set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n" \
    "set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n" \
    "set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\n" \
    "\n" \
    "set(CMAKE_CROSS_COMPILING TRUE)\n"

RUN mkdir build
WORKDIR ${SRC}/rdkit/build
RUN export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk && \
    FREETYPE_DIR=${DEPS} ${DEPS}/bin/cmake \
    -D RDK_BUILD_INCHI_SUPPORT=ON \
    -D RDK_BUILD_AVALON_SUPPORT=ON \
    -D RDK_BUILD_PYTHON_WRAPPERS=OFF \
    -D RDK_BUILD_FREESASA_SUPPORT=ON \
    -D RDK_BUILD_MOLINTERCHANGE_SUPPORT=ON \
    -D RDK_BUILD_COORDGEN_SUPPORT=ON \
    -D RDK_BUILD_CAIRO_SUPPORT=ON \
    -D RDK_INSTALL_INTREE=OFF \
    -D RDK_BUILD_SWIG_WRAPPERS=ON \
    -D RDK_BUILD_SWIG_JAVA_WRAPPER=ON \
    -D RDK_BUILD_SWIG_CSHARP_WRAPPER=ON \
    -D RDK_BUILD_THREADSAFE_SSS=ON \
    -D RDK_USE_BOOST_SERIALIZATION=ON \
    -D RDK_BUILD_CPP_TESTS=ON \
    -D RDK_BUILD_PGSQL=OFF \
    -D Boost_INCLUDE_DIR=${DEPS}/include \
    -D Boost_LIBRARY_DIR=${DEPS}/lib \
    -D Boost_NO_SYSTEM_PATHS=ON \
    -D Boost_NO_BOOST_CMAKE=ON \
    -D Boost_USE_STATIC_LIBS=ON \
    -D CMAKE_BUILD_TYPE=Release \
    -D EIGEN3_INCLUDE_DIR=${DEPS}/include/eigen3 \
    -D ZLIB_LIBRARY=${DEPS}/lib/libz.a \
    -D ZLIB_INCLUDE_DIR=${DEPS}/include \
    -D SWIG_EXECUTABLE=${DEPS}/bin/swig \
    -D SWIG_DIR=${DEPS}/share/swig/${SWIG_VERSION} \
    -D FREETYPE_LIBRARY=${DEPS}/lib/libfreetype.a \
    -D FREETYPE_INCLUDE_DIRS=${DEPS}/include/freetype2 \
    -D CAIRO_INCLUDE_DIR=${DEPS}/include/cairo \
    -D CAIRO_LIBRARY_DIR=${DEPS}/lib \
    -D CMAKE_INSTALL_PREFIX=${IMAGE} \
    -D CMAKE_TOOLCHAIN_FILE=$PWD/../win-${ARCH}.cmake \
    -D JAVA_AWT_LIBRARY="${JAVA_HOME}/lib/amd64/libjawt.so" \
    -D JAVA_JVM_LIBRARY="${JAVA_HOME}/jre/lib/amd64/server/libjvm.so" \
    -D JAVA_INCLUDE_PATH="${JAVA_HOME}/include" \
    -D JAVA_INCLUDE_PATH2="${JAVA_HOME}/include/linux" \
    -D JAVA_AWT_INCLUDE_PATH="${JAVA_HOME}/include" \
    ..
RUN make -j${BUILD_CONCURRENCY} && make -j${BUILD_CONCURRENCY} install
# tar up the Windows exe files such that we can run them later
RUN mkdir windows_ctest_exe
RUN find . -name '*.exe' | grep -v CMakeFiles | sed "s|^.*$|cp & windows_ctest_exe|" | sh
RUN cp ../Code/JavaWrappers/gmwrapper/src-test/org/RDKit/*.java windows_ctest_exe
RUN cp /usr/${ARCH}-w64-mingw32/sys-root/mingw/bin/*.dll windows_ctest_exe
RUN tar cjf windows_ctest_exe.tar.bz2 windows_ctest_exe

FROM scratch as export-stage
ARG ARCH
ARG SRC
ARG RDKIT_RELEASE
COPY --from=build-stage ${SRC}/rdkit/Code/JavaWrappers/gmwrapper/org.RDKit.jar /${ARCH}/org.RDKit.jar
COPY --from=build-stage ${SRC}/rdkit/Code/JavaWrappers/gmwrapper/org.RDKitDoc.jar /${ARCH}/org.RDKitDoc.jar
COPY --from=build-stage ${SRC}/rdkit/Code/JavaWrappers/gmwrapper/GraphMolWrap.dll /${ARCH}/GraphMolWrap.dll
COPY --from=build-stage ${SRC}/rdkit/Code/JavaWrappers/csharp_wrapper/RDKFuncs.dll /${ARCH}/RDKFuncs.dll
COPY --from=build-stage ${SRC}/rdkit/Code/JavaWrappers/csharp_wrapper/RDKit2DotNet.dll /${ARCH}/RDKit2DotNet.dll
COPY --from=build-stage ${SRC}/rdkit/build/windows_ctest_exe.tar.bz2 /${ARCH}/windows_ctest_exe.tar.bz2
