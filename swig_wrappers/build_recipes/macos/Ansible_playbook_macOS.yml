# To build a SWIG RDKit libs Ansible playbook:
# ansible-playbook --connection=local --inventory 127.0.0.1 --limit 127.0.0.1 Ansible_playbook_macOS_arm64.yml

- name: Build RDKit SWIG DLLs
  hosts: localhost
  connection: local

  vars:
    BUILD_CONCURRENCY: 6
    MIN_MACOS_VERSION: "10.13"
    BUILD_TARGET: "-mmacosx-version-min={{ MIN_MACOS_VERSION }} -arch {{ ARCH }}"
    USE_CXX11: "-std=c++11"
    RDKIT_RELEASE: "2024_09_2"
    # RDKIT_RELEASE: ""
    RDKIT_CHKSUM: "70eaa9001bfce5b090129eda93d68d06"
    # RDKIT_CHKSUM: ""
    RDKIT_GIT_URL: "https://github.com/rdkit/rdkit"
    # RDKIT_BRANCH: "master"
    RDKIT_BRANCH: ""
    PKGCONFIG_VERSION: "0.29.2"
    PKGCONFIG_CHECKSUM: "76e501663b29cb7580245720edfb6106164fad2b"
    ZLIB_VERSION: "1.3.1"
    ZLIB_CHKSUM: "9a93b2b7dfdac77ceba5a558a580e74667dd6fede4585b91eefb60f03b72df23"
    BZIP2_VERSION: "1.0.8"
    BZIP2_CHKSUM: "67e051268d0c475ea773822f7500d0e5"
    LZMA_VERSION: "5.6.3"
    LZMA_CHKSUM: "e7f2caec3e4951673942f45cbf706797"
    BOOST_VERSION: "1_83_0"
    BOOST_CHKSUM: "6478edfe2f3305127cffe8caf73ea0176c53769f4bf1585be237eb30798c3b8e"
    CMAKE_VERSION: "3.27.7"
    CMAKE_CHKSUM: "0f11cf15c7f2fa6234b9fc415c78029c"
    EIGEN_VERSION: "3.4.0"
    EIGEN_CHKSUM: "132dde48fe2b563211675626d29f1707"
    PCRE2_VERSION: "10.42"
    PCRE2_CHKSUM: "c73351c42d01b264f59d14b61877b0c5"
    FREETYPE_VERSION: "2.13.2"
    FREETYPE_CHKSUM: "d99447cf00c5f2679918f66f2b5771f6"
    SWIG_VERSION: "4.2.0"
    SWIG_CHKSUM: "4d03374a2c30367699fa0928e1d901e8"
    LIBPNG_VERSION: "1.6.40"
    LIBPNG_CHKSUM: "8f720b363aa08683c9bf2a563236f45313af2c55d542b5481ae17dd8d183bb42"
    PIXMAN_VERSION: "0.42.2"
    PIXMAN_CHKSUM: "0a4e327aef89c25f8cb474fbd01de834fd2a1b13fdf7db11ab72072082e45881cd16060673b59d02054b1711ae69c6e2395f6ae9214225ee7153939efcd2fa5d"
    CAIRO_VERSION: "1.16.0"
    CAIRO_CHKSUM: "00e81842ae5e81bb0343108884eb5205be0eac14" #sha1
    OPENJDK8_VERSION: "jdk8u352-b08"
    OPENJDK8_CHKSUM: "f74d949aaaabd6116eaeccc34cc5ff707d3317b2cdbd3a8147920e1851d20cf2"
    MONO_VERSION: "6.12.0.182"
    MONO_CHKSUM: "3e7d4c67a03f4edc542c57d2684c9819"
    ARCH_DIR: "{{ playbook_dir }}/{{ ARCH }}"
    DEPS_NOARCH: "{{ playbook_dir }}/noarch/deps"
    DEPS: "{{ ARCH_DIR }}/deps"
    WORK: "{{ ARCH_DIR }}/work"
    SRC: "{{ ARCH_DIR }}/src"
    IMAGE: "{{ ARCH_DIR }}/image"

  tasks:
  - name: Fail if ARCH is undefineds
    ansible.builtin.fail: msg="FAILED - Please set ARCH to either x86_64 or arm64."
    when: ARCH is undefined

  - name: find OpenJDK short version
    ansible.builtin.shell: echo {{ OPENJDK8_VERSION }} | sed "s|jdk\(.*\)-\(.*\)|\1\2|"
    register: openjdk8_short_reg

  - name: set OpenJDK short version var
    ansible.builtin.set_fact:
      OPENJDK8_SHORT_VERSION: "{{ openjdk8_short_reg.stdout }}"

  - name: find SDK path
    ansible.builtin.shell: xcrun --show-sdk-path
    register: sdk_path_reg

  - name: set SDK path var
    ansible.builtin.set_fact:
      sdk_path_var: "{{ sdk_path_reg.stdout }}"

  - name: create main directories
    ansible.builtin.shell: mkdir -p "{{ SRC }}" "{{ WORK }}" "{{ IMAGE }}" "{{ DEPS }}" "{{ DEPS_NOARCH }}"

  - name: create work sub-directories
    ansible.builtin.shell: mkdir -p "{{ WORK }}/boost" "{{ WORK }}/cmake" "{{ WORK }}/eigen" \
      "{{ WORK }}/zlib" "{{ WORK }}/bzip2" "{{ WORK }}/lzma" "{{ WORK }}/freetype" "{{ WORK }}/pcre2" \
      "{{ WORK }}/swig" "{{ WORK }}/pkgconfig" "{{ WORK }}/cairo" "{{ WORK }}/mono" \
      "{{ DEPS_NOARCH }}/openjdk8"

  - name: does pkg-config exist?
    stat:
      path: "{{ DEPS }}/bin/pkg-config"
    register: pkgconfig_exe

  - name: install pkg-config
    block:
    - name: download pkg-config
      ansible.builtin.shell: if [ ! -e pkg-config-{{ PKGCONFIG_VERSION }}.tar.gz ] || \
          [ `shasum pkg-config-{{ PKGCONFIG_VERSION }}.tar.gz | awk "{print \\$1}"` != {{ PKGCONFIG_CHECKSUM }} ]; then \
          rm -f pkg-config-{{ PKGCONFIG_VERSION }}.tar.gz; \
          curl -L -O http://pkgconfig.freedesktop.org/releases/pkg-config-{{ PKGCONFIG_VERSION }}.tar.gz && \
            [ `shasum pkg-config-{{ PKGCONFIG_VERSION }}.tar.gz | awk "{print \\$1}"` = {{ PKGCONFIG_CHECKSUM }} ] || \
            ( >&2 echo "Failed to download pkg-config" && exit 1 ); \
        fi
      args:
        chdir: "{{ WORK }}/pkgconfig"

    - name: untar pkg-config
      ansible.builtin.shell: tar xzf pkg-config-{{ PKGCONFIG_VERSION }}.tar.gz
      args:
        chdir: "{{ WORK }}/pkgconfig"

    - name: configure pkg-config
      ansible.builtin.shell: CC="clang -fPIC {{ BUILD_TARGET }}" ./configure \
        --enable-shared=no --enable-static=yes --with-internal-glib --prefix="{{ DEPS }}"
      args:
        chdir: "{{ WORK }}/pkgconfig/pkg-config-{{ PKGCONFIG_VERSION }}"

    - name: build pkg-config
      ansible.builtin.shell: make -j{{ BUILD_CONCURRENCY }} clean && \
        make -j{{ BUILD_CONCURRENCY }} && make -j{{ BUILD_CONCURRENCY }} install
      args:
        chdir: "{{ WORK }}/pkgconfig/pkg-config-{{ PKGCONFIG_VERSION }}"
    when: pkgconfig_exe.stat.exists == false

  - name: does zlib exist?
    stat: 
      path: "{{ DEPS }}/lib/libz.a"
    register: libz

  - name: install zlib
    block:
    - name: download zlib
      ansible.builtin.shell: if [ ! -e zlib-{{ ZLIB_VERSION }}.tar.gz ] || \
          [ `shasum -a 256 zlib-{{ ZLIB_VERSION }}.tar.gz | awk "{print \\$1}"` != {{ ZLIB_CHKSUM }} ]; then \
          rm -f zlib-{{ ZLIB_VERSION }}.tar.gz; \
          curl -L -O https://zlib.net/zlib-{{ ZLIB_VERSION }}.tar.gz && \
            [ `shasum -a 256 zlib-{{ ZLIB_VERSION }}.tar.gz | awk "{print \\$1}"` = {{ ZLIB_CHKSUM }} ] || \
            ( >&2 echo "Failed to download zlib" && exit 1 ); \
        fi
      args:
        chdir: "{{ WORK }}/zlib"

    - name: untar zlib
      ansible.builtin.shell: tar xzf zlib-{{ ZLIB_VERSION }}.tar.gz
      args:
        chdir: "{{ WORK }}/zlib"

    - name: configure zlib
      ansible.builtin.shell: CC="clang -fPIC {{ BUILD_TARGET }}" ./configure --static --64 --prefix="{{ DEPS }}"
      args:
        chdir: "{{ WORK }}/zlib/zlib-{{ ZLIB_VERSION }}"

    - name: build zlib
      ansible.builtin.shell: make -j{{ BUILD_CONCURRENCY }} clean && make -j{{ BUILD_CONCURRENCY }} && make -j{{ BUILD_CONCURRENCY }} install
      args:
        chdir: "{{ WORK }}/zlib/zlib-{{ ZLIB_VERSION }}"
    when: libz.stat.exists == false

  - name: does bzip2 exist?
    stat: 
      path: "{{ DEPS }}/lib/libbz2.a"
    register: libbz2

  - name: install bzip2
    block:
    - name: download bzip2
      ansible.builtin.shell: if [ ! -e bzip2-{{ BZIP2_VERSION }}.tar.gz ] || \
          [ `md5 -q bzip2-{{ BZIP2_VERSION }}.tar.gz` != BZIP2_CHKSUM ]; then \
          rm -f bzip2-{{ BZIP2_VERSION }}.tar.gz; \
          curl -L -O https://sourceware.org/pub/bzip2/bzip2-{{ BZIP2_VERSION }}.tar.gz && \
            [ `md5 -q bzip2-{{ BZIP2_VERSION }}.tar.gz` = {{ BZIP2_CHKSUM }} ] || \
            ( >&2 echo "Failed to download bzip2" && exit 1 ); \
        fi
      args:
        chdir: "{{ WORK }}/bzip2"

    - name: untar bzip2
      ansible.builtin.shell: tar xzf bzip2-{{ BZIP2_VERSION }}.tar.gz
      args:
        chdir: "{{ WORK }}/bzip2"

    - name: build bzip2
      ansible.builtin.shell: make -j{{ BUILD_CONCURRENCY }} clean && \
          make CC="clang -fPIC {{ BUILD_TARGET }}" PREFIX="{{ DEPS }}" -j{{ BUILD_CONCURRENCY }} && \
          make PREFIX="{{ DEPS }}" -j{{ BUILD_CONCURRENCY }} install
      args:
        chdir: "{{ WORK }}/bzip2/bzip2-{{ BZIP2_VERSION }}"
    when: libbz2.stat.exists == false

  - name: does lzma exist?
    stat:
      path: "{{ DEPS }}/lib/liblzma.a"
    register: liblzma

  - name: install lzma
    block:
    - name: download lzma
      ansible.builtin.shell: if [ ! -e xz-{{ LZMA_VERSION }}.tar.gz ] || \
          [ `md5 -q xz-{{ LZMA_VERSION }}.tar.gz | awk "{print \\$1}"` != {{ LZMA_CHKSUM }} ]; then \
          rm -f xz-{{ LZMA_VERSION }}.tar.gz; \
          curl -L -O https://github.com/tukaani-project/xz/releases/download/v{{ LZMA_VERSION }}/xz-{{ LZMA_VERSION }}.tar.gz && \
            [ `md5 -q xz-{{ LZMA_VERSION }}.tar.gz | awk "{print \\$1}"` = {{ LZMA_CHKSUM }} ] || \
            ( >&2 echo "Failed to download lzma" && exit 1 ); \
        fi
      args:
        chdir: "{{ WORK }}/lzma"

    - name: untar lzma
      ansible.builtin.shell: tar xzf xz-{{ LZMA_VERSION }}.tar.gz
      args:
        chdir: "{{ WORK }}/lzma"

    - name: configure lzma
      ansible.builtin.shell: CC="clang -fPIC {{ BUILD_TARGET }}" ./configure --enable-shared=no --enable-static=yes --prefix="{{ DEPS }}"
      args:
        chdir: "{{ WORK }}/lzma/xz-{{ LZMA_VERSION }}"

    - name: build lzma
      ansible.builtin.shell: make -j{{ BUILD_CONCURRENCY }} clean && make -j{{ BUILD_CONCURRENCY }} && make -j{{ BUILD_CONCURRENCY }} install
      args:
        chdir: "{{ WORK }}/lzma/xz-{{ LZMA_VERSION }}"
    when: liblzma.stat.exists == false

  - name: does boost exist?
    stat: 
      path: "{{ DEPS }}/lib/libboost_system.a"
    register: libboost

  - name: install boost
    block:
    - name: download boost
      ansible.builtin.shell: if [ ! -e boost_{{ BOOST_VERSION }}.tar.bz2 ] || \
          [ `shasum -a 256 boost_{{ BOOST_VERSION }}.tar.bz2 | awk "{print \\$1}"` != {{ BOOST_CHKSUM }} ]; then \
          rm -f boost_{{ BOOST_VERSION }}.tar.bz2; \
          curl -L -O https://boostorg.jfrog.io/artifactory/main/release/`echo {{ BOOST_VERSION }} | sed "s|_|.|g"`/source/boost_{{ BOOST_VERSION }}.tar.bz2 && \
            [ `shasum -a 256 boost_{{ BOOST_VERSION }}.tar.bz2 | awk "{print \\$1}"` = {{ BOOST_CHKSUM }} ] || \
            ( >&2 echo "Failed to download boost" && exit 1 ); \
        fi
      args:
        chdir: "{{ WORK }}/boost"

    - name: untar boost
      ansible.builtin.shell: tar xjf boost_{{ BOOST_VERSION }}.tar.bz2
      args:
        chdir: "{{ WORK }}/boost"

    - name: bootstrap boost
      ansible.builtin.shell: MACOSX_DEPLOYMENT_TARGET="{{ MIN_MACOS_VERSION }}" ARCHS="{{ ARCH }}" ./bootstrap.sh \
        --with-libraries=serialization,iostreams,regex,system,program_options --without-icu --prefix="{{ DEPS }}"
      args:
        chdir: "{{ WORK }}/boost/boost_{{ BOOST_VERSION }}"

    # change bz2 lzma z into /deps/lib/libbz2.a /deps/lib/liblzma.a /deps/lib/libz.a
    # to avoid libboost_iostreams link errors downstream
    - name: bjam boost
      ansible.builtin.shell: MACOSX_DEPLOYMENT_TARGET="{{ MIN_MACOS_VERSION }}" ARCHS="{{ ARCH }}" \
        ./b2 cflags="-fPIC {{ BUILD_TARGET }}" cxxflags="-fPIC {{ BUILD_TARGET }}" \
          --prefix="{{ DEPS }}" variant=release link=static \
          --with-serialization --with-iostreams --with-regex --with-system --with-program_options \
          -sBZIP2_INCLUDE="{{ DEPS }}/include" -sBZIP2_LIBRARY_PATH="{{ DEPS }}/lib" \
          -sZLIB_INCLUDE="{{ DEPS }}/include" -sZLIB_LIBRARY_PATH="{{ DEPS }}/lib" \
          -sLZMA_INCLUDE="{{ DEPS }}/include" -sLZMA_LIBRARY_PATH="{{ DEPS }}/lib" \
          install && \
          sed -E -i ".orig" "s/([ :;])(bz2|lzma|z)/\1\${_BOOST_LIBDIR}\/lib\2.a/g" \
              {{ DEPS }}/lib/cmake/boost_iostreams-`echo -n {{ BOOST_VERSION }} | tr _ .`/libboost_iostreams-variant-static.cmake
      args:
        chdir: "{{ WORK }}/boost/boost_{{ BOOST_VERSION }}"
    when: libboost.stat.exists == false

  - name: does cmake exist?
    stat: 
      path: "{{ DEPS }}/bin/cmake"
    register: cmake_exe

  - name: install cmake
    block:
    - name: download cmake
      ansible.builtin.shell: if [ ! -e cmake-{{ CMAKE_VERSION }}.tar.gz ] || \
          [ `md5 -q cmake-{{ CMAKE_VERSION }}.tar.gz` != {{ CMAKE_CHKSUM }} ]; then \
          rm -f cmake-{{ CMAKE_VERSION }}.tar.gz; \
          curl -L -O https://github.com/Kitware/CMake/releases/download/v{{ CMAKE_VERSION }}/cmake-{{ CMAKE_VERSION }}.tar.gz && \
            [ `md5 -q cmake-{{ CMAKE_VERSION }}.tar.gz` = {{ CMAKE_CHKSUM }} ] || \
            ( >&2 echo "Failed to download cmake" && exit 1 ); \
        fi
      args:
        chdir: "{{ WORK }}/cmake"

    - name: untar cmake
      ansible.builtin.shell: tar xzf cmake-{{ CMAKE_VERSION }}.tar.gz
      args:
        chdir: "{{ WORK }}/cmake"

    - name: bootstrap cmake
      ansible.builtin.shell: MACOSX_DEPLOYMENT_TARGET="{{ MIN_MACOS_VERSION }}" ARCHS="{{ ARCH }}" \
        ./bootstrap --prefix={{ DEPS }} --parallel={{ BUILD_CONCURRENCY }}
      args:
        chdir: "{{ WORK }}/cmake/cmake-{{ CMAKE_VERSION }}"

    - name: build cmake
      ansible.builtin.shell: make -j{{ BUILD_CONCURRENCY }} clean && \
        MACOSX_DEPLOYMENT_TARGET="{{ MIN_MACOS_VERSION }}" ARCHS="{{ ARCH }}" make -j{{ BUILD_CONCURRENCY }} && \
        make -j{{ BUILD_CONCURRENCY }} install
      args:
        chdir: "{{ WORK }}/cmake/cmake-{{ CMAKE_VERSION }}"
    when: cmake_exe.stat.exists == false

  - name: does eigen exist?
    stat: 
      path: "{{ DEPS }}/include/eigen3"
    register: eigen_headers

  - name: install eigen
    block:
    - name: download eigen
      ansible.builtin.shell: if [ ! -e eigen-{{ EIGEN_VERSION }}.tar.bz2 ] || \
          [ `md5 -q eigen-{{ EIGEN_VERSION }}.tar.bz2` != {{ EIGEN_CHKSUM }} ]; then \
          rm -f eigen-{{ EIGEN_VERSION }}.tar.bz2; \
          curl -L -O https://gitlab.com/libeigen/eigen/-/archive/{{ EIGEN_VERSION }}/eigen-{{ EIGEN_VERSION }}.tar.bz2 && \
            [ `md5 -q eigen-{{ EIGEN_VERSION }}.tar.bz2` = {{ EIGEN_CHKSUM }} ] || \
            ( >&2 echo "Failed to download eigen" && exit 1 ); \
        fi
      args:
        chdir: "{{ WORK }}/eigen"

    - name: untar eigen
      ansible.builtin.shell: tar xjf eigen-{{ EIGEN_VERSION }}.tar.bz2
      args:
        chdir: "{{ WORK }}/eigen"

    - name: configure eigen
      ansible.builtin.shell: mkdir -p build && cd build && \
        MACOSX_DEPLOYMENT_TARGET="{{ MIN_MACOS_VERSION }}" ARCHS="{{ ARCH }}" "{{ DEPS }}/bin/cmake" -DCMAKE_INSTALL_PREFIX="{{ DEPS }}" ..
      args:
        chdir: "{{ WORK }}/eigen/eigen-{{ EIGEN_VERSION }}"

    - name: build eigen
      ansible.builtin.shell: MACOSX_DEPLOYMENT_TARGET="{{ MIN_MACOS_VERSION }}" ARCHS="{{ ARCH }}" make -j{{ BUILD_CONCURRENCY }} install
      args:
        chdir: "{{ WORK }}/eigen/eigen-{{ EIGEN_VERSION }}/build"
    when: eigen_headers.stat.exists == false

  - name: does PCRE2 exist?
    stat: 
      path: "{{ DEPS }}/lib/libpcre2-8.a"
    register: libpcre2

  - name: install PCRE2
    block:
    - name: download PCRE2
      ansible.builtin.shell: if [ ! -e pcre2-{{ PCRE2_VERSION }}.tar.gz ] || \
          [ `md5 -q pcre2-{{ PCRE2_VERSION }}.tar.gz` != {{ PCRE2_CHKSUM }} ]; then \
          rm -f pcre2-{{ PCRE2_VERSION }}.tar.gz; \
          curl -L -O https://github.com/PCRE2Project/pcre2/archive/refs/tags/pcre2-{{ PCRE2_VERSION }}.tar.gz && \
            [ `md5 -q pcre2-{{ PCRE2_VERSION }}.tar.gz` = {{ PCRE2_CHKSUM }} ] || \
            ( >&2 echo "Failed to download PCRE2" && exit 1 ); \
        fi
      args:
        chdir: "{{ WORK }}/pcre2"

    - name: untar PCRE2
      ansible.builtin.shell: tar xzf pcre2-{{ PCRE2_VERSION }}.tar.gz
      args:
        chdir: "{{ WORK }}/pcre2"

    - name: configure PCRE2
      ansible.builtin.shell: mkdir -p build && cd build && \
        "{{ DEPS }}/bin/cmake" "-D CMAKE_INSTALL_PREFIX={{ DEPS }}" \
        "-D BUILD_STATIC_LIBS=ON" "-D PCRE2_STATIC_PIC=ON" \
        "-D CMAKE_OSX_DEPLOYMENT_TARGET={{ MIN_MACOS_VERSION }}" \
        "-D CMAKE_OSX_ARCHITECTURES={{ ARCH }}" ..
      args:
        chdir: "{{ WORK }}/pcre2/pcre2-pcre2-{{ PCRE2_VERSION }}"

    - name: build PCRE2
      ansible.builtin.shell: MACOSX_DEPLOYMENT_TARGET="{{ MIN_MACOS_VERSION }}" ARCHS="{{ ARCH }}" make -j{{ BUILD_CONCURRENCY }} && make -j{{ BUILD_CONCURRENCY }} install
      args:
        chdir: "{{ WORK }}/pcre2/pcre2-pcre2-{{ PCRE2_VERSION }}/build"
    when: libpcre2.stat.exists == false

  - name: does swig exist?
    stat: 
      path: "{{ DEPS }}/bin/swig"
    register: swig_exe

  - name: install swig
    block:
    - name: download swig
      ansible.builtin.shell: if [ ! -e swig-{{ SWIG_VERSION }}.tar.gz ] || \
          [ `md5 -q swig-{{ SWIG_VERSION }}.tar.gz` != {{ SWIG_CHKSUM }} ]; then \
          rm -f swig-{{ SWIG_VERSION }}.tar.gz; \
          for i in `seq 1 5`; do \
            curl -L -o swig-{{ SWIG_VERSION }}.tar.gz https://sourceforge.net/projects/swig/files/swig/swig-{{ SWIG_VERSION }}/swig-{{ SWIG_VERSION }}.tar.gz/download && \
              [ `md5 -q swig-{{ SWIG_VERSION }}.tar.gz` = {{ SWIG_CHKSUM }} ] && touch swig_md5_ok && break; \
          done; \
          test -e swig_md5_ok || ( >&2 echo "Failed to download SWIG" && exit 1 ); \
        fi
      args:
        chdir: "{{ WORK }}/swig"

    - name: untar swig
      ansible.builtin.shell: tar xzf swig-{{ SWIG_VERSION }}.tar.gz
      args:
        chdir: "{{ WORK }}/swig"

    - name: configure swig
      ansible.builtin.shell: PKG_CONFIG_PATH="{{ DEPS }}/lib/pkgconfig" PATH="{{ DEPS }}/bin:$PATH" \
        CC="clang {{ BUILD_TARGET }}" CXX="clang++ {{ BUILD_TARGET }} {{ USE_CXX11 }}" ./configure --prefix="{{ DEPS }}"
      args:
        chdir: "{{ WORK }}/swig/swig-{{ SWIG_VERSION }}"

    - name: build swig
      ansible.builtin.shell: make -j{{ BUILD_CONCURRENCY }} clean && \
        make -j{{ BUILD_CONCURRENCY }} && make -j{{ BUILD_CONCURRENCY }} install
      args:
        chdir: "{{ WORK }}/swig/swig-{{ SWIG_VERSION }}"
    when: swig_exe.stat.exists == false

  - name: does freetype exist?
    stat: 
      path: "{{ DEPS }}/lib/libfreetype.a"
    register: libfreetype

  - name: install freetype
    block:
    - name: download freetype
      ansible.builtin.shell: if [ ! -e freetype-{{ FREETYPE_VERSION }}.tar.gz ] || \
          [ `md5 -q freetype-{{ FREETYPE_VERSION }}.tar.gz` != {{ FREETYPE_CHKSUM }} ]; then \
          rm -f freetype-{{ FREETYPE_VERSION }}.tar.gz; \
          for i in `seq 1 5`; do \
            curl -L -o freetype-{{ FREETYPE_VERSION }}.tar.gz https://sourceforge.net/projects/freetype/files/freetype2/{{ FREETYPE_VERSION }}/freetype-{{ FREETYPE_VERSION }}.tar.gz/download && \
              [ `md5 -q freetype-{{ FREETYPE_VERSION }}.tar.gz` = {{ FREETYPE_CHKSUM }} ] && touch freetype_md5_ok && break; \
          done; \
          test -e freetype_md5_ok || ( >&2 echo "Failed to download freetype" && exit 1 ); \
        fi
      args:
        chdir: "{{ WORK }}/freetype"

    - name: untar freetype
      ansible.builtin.shell: tar xzf freetype-{{ FREETYPE_VERSION }}.tar.gz
      args:
        chdir: "{{ WORK }}/freetype"

    - name: configure freetype
      ansible.builtin.shell: CC="clang -fPIC {{ BUILD_TARGET }}" CXX="clang++ -fPIC {{ BUILD_TARGET }}" \
        PATH="{{ DEPS }}/bin:$PATH" PKG_CONFIG_PATH="{{ DEPS }}/lib/pkgconfig" \
        ./configure --enable-static=yes --enable-shared=no --prefix="{{ DEPS }}"
      args:
        chdir: "{{ WORK }}/freetype/freetype-{{ FREETYPE_VERSION }}"

    - name: build freetype
      ansible.builtin.shell: make -j{{ BUILD_CONCURRENCY }} clean && \
        make -j{{ BUILD_CONCURRENCY }} && make -j{{ BUILD_CONCURRENCY }} install
      args:
        chdir: "{{ WORK }}/freetype/freetype-{{ FREETYPE_VERSION }}"
    when: libfreetype.stat.exists == false

  - name: does libpng exist?
    stat: 
      path: "{{ DEPS }}/lib/libpng.a"
    register: libpng

  - name: install libpng
    block:
    - name: download libpng
      ansible.builtin.shell: if [ ! -e libpng-{{ LIBPNG_VERSION }}.tar.gz ] || \
          [ `shasum -a 256 libpng-{{ LIBPNG_VERSION }}.tar.gz | awk "{print \\$1}"` != {{ LIBPNG_CHKSUM }} ]; then \
          rm -f libpng-{{ LIBPNG_VERSION }}.tar.gz; \
          for i in `seq 1 5`; do \
            curl -L -O https://download.sourceforge.net/libpng/libpng-{{ LIBPNG_VERSION }}.tar.gz && \
              [ `shasum -a 256 libpng-{{ LIBPNG_VERSION }}.tar.gz | awk "{print \\$1}"` = {{ LIBPNG_CHKSUM }} ] && touch libpng_md5_ok && break; \
          done; \
          test -e libpng_md5_ok || ( >&2 echo "Failed to download libpng" && exit 1 ); \
        fi
      args:
        chdir: "{{ WORK }}/cairo"

    - name: untar libpng
      ansible.builtin.shell: tar xzf libpng-{{ LIBPNG_VERSION }}.tar.gz
      args:
        chdir: "{{ WORK }}/cairo"

    - name: configure libpng
      ansible.builtin.shell: CC="clang -fPIC {{ BUILD_TARGET }}" \
        PATH="{{ DEPS }}/bin:$PATH" PKG_CONFIG_PATH="{{ DEPS }}/lib/pkgconfig" \
        ./configure --enable-shared=no --enable-static=yes --prefix="{{ DEPS }}"
      args:
        chdir: "{{ WORK }}/cairo/libpng-{{ LIBPNG_VERSION }}"

    - name: build libpng
      ansible.builtin.shell: make -j{{ BUILD_CONCURRENCY }} clean && \
        make -j{{ BUILD_CONCURRENCY }} && make -j{{ BUILD_CONCURRENCY }} install
      args:
        chdir: "{{ WORK }}/cairo/libpng-{{ LIBPNG_VERSION }}"
    when: libpng.stat.exists == false

  - name: does pixman exist?
    stat: 
      path: "{{ DEPS }}/lib/libpixman-1.a"
    register: libpixman

  - name: install pixman
    block:
    - name: download pixman
      ansible.builtin.shell: if [ ! -e pixman-{{ PIXMAN_VERSION }}.tar.gz ] || \
          [ `shasum -a 512 pixman-{{ PIXMAN_VERSION }}.tar.gz | awk "{print \\$1}"` != {{ PIXMAN_CHKSUM }} ]; then \
          rm -f pixman-{{ PIXMAN_VERSION }}.tar.gz; \
          curl -L -O https://www.cairographics.org/releases/pixman-{{ PIXMAN_VERSION }}.tar.gz && \
            [ `shasum -a 512 pixman-{{ PIXMAN_VERSION }}.tar.gz | awk "{print \\$1}"` = {{ PIXMAN_CHKSUM }} ] || \
            ( >&2 echo "Failed to download pixman" && exit 1 ); \
        fi
      args:
        chdir: "{{ WORK }}/cairo"

    - name: untar pixman
      ansible.builtin.shell: tar xzf pixman-{{ PIXMAN_VERSION }}.tar.gz
      args:
        chdir: "{{ WORK }}/cairo"

    - name: configure pixman
      ansible.builtin.shell: CC="clang -fPIC {{ BUILD_TARGET }}" \
        PATH="{{ DEPS }}/bin:$PATH" PKG_CONFIG_PATH="{{ DEPS }}/lib/pkgconfig" \
        ./configure --disable-arm-a64-neon --enable-shared=no --enable-static=yes --prefix="{{ DEPS }}"
      args:
        chdir: "{{ WORK }}/cairo/pixman-{{ PIXMAN_VERSION }}"

    - name: build pixman
      ansible.builtin.shell: make -j{{ BUILD_CONCURRENCY }} clean && \
        make -j{{ BUILD_CONCURRENCY }} && make -j{{ BUILD_CONCURRENCY }} install
      args:
        chdir: "{{ WORK }}/cairo/pixman-{{ PIXMAN_VERSION }}"
    when: libpixman.stat.exists == false

  - name: does cairo exist?
    stat: 
      path: "{{ DEPS }}/lib/libcairo.a"
    register: libcairo

  - name: install cairo
    block:
    - name: download cairo
      ansible.builtin.shell: if [ ! -e cairo-{{ CAIRO_VERSION }}.tar.xz ] || \
          [ `shasum cairo-{{ CAIRO_VERSION }}.tar.xz | awk "{print \\$1}"` != {{ CAIRO_CHKSUM }} ]; then \
          rm -f cairo-{{ CAIRO_VERSION }}.tar.xz; \
          curl -L -O https://www.cairographics.org/releases/cairo-{{ CAIRO_VERSION }}.tar.xz && \
            [ `shasum cairo-{{ CAIRO_VERSION }}.tar.xz | awk "{print \\$1}"` = {{ CAIRO_CHKSUM }} ] || \
            ( >&2 echo "Failed to download cairo" && exit 1 ); \
        fi
      args:
        chdir: "{{ WORK }}/cairo"

    - name: untar cairo
      ansible.builtin.shell: tar xJf cairo-{{ CAIRO_VERSION }}.tar.xz
      args:
        chdir: "{{ WORK }}/cairo"

    - name: configure cairo
      ansible.builtin.shell: CC="clang -fPIC {{ BUILD_TARGET }}" \
        CXX="clang++ -fPIC {{ BUILD_TARGET }}" \
        PATH="{{ DEPS }}/bin:$PATH" PKG_CONFIG_PATH="{{ DEPS }}/lib/pkgconfig" \
        LDFLAGS="-framework CoreFoundation -framework CoreGraphics" ./configure \
        --enable-shared=no --enable-static=yes --prefix="{{ DEPS }}"
      args:
        chdir: "{{ WORK }}/cairo/cairo-{{ CAIRO_VERSION }}"

    - name: build cairo
      ansible.builtin.shell: make -j{{ BUILD_CONCURRENCY }} clean && \
        make -j{{ BUILD_CONCURRENCY }} && make -j{{ BUILD_CONCURRENCY }} install
      args:
        chdir: "{{ WORK }}/cairo/cairo-{{ CAIRO_VERSION }}"
    when: libcairo.stat.exists == false

  - name: does OpenJDK8 exist?
    stat: 
      path: "{{ DEPS_NOARCH }}/openjdk8/{{ OPENJDK8_VERSION }}/Contents/Home"
    register: openjdk8

  - name: install OpenJDK8
    block:
    - name: download OpenJDK8
      ansible.builtin.shell: if [ ! -e OpenJDK8U-jdk_x64_mac_hotspot_{{ OPENJDK8_SHORT_VERSION }}.tar.gz ] || \
          [ `shasum -a 256 OpenJDK8U-jdk_x64_mac_hotspot_{{ OPENJDK8_SHORT_VERSION }}.tar.gz | awk "{print \\$1}"` != {{ OPENJDK8_CHKSUM }} ]; then \
          rm -f OpenJDK8U-jdk_x64_mac_hotspot_{{ OPENJDK8_SHORT_VERSION }}.tar.gz; \
          curl -L -O https://github.com/adoptium/temurin8-binaries/releases/download/{{ OPENJDK8_VERSION }}/OpenJDK8U-jdk_x64_mac_hotspot_{{ OPENJDK8_SHORT_VERSION }}.tar.gz && \
            [ `shasum -a 256 OpenJDK8U-jdk_x64_mac_hotspot_{{ OPENJDK8_SHORT_VERSION }}.tar.gz | awk "{print \\$1}"` = {{ OPENJDK8_CHKSUM }} ] || \
            ( >&2 echo "Failed to download OpenJDK8" && exit 1 ); \
        fi
      args:
        chdir: "{{ DEPS_NOARCH }}/openjdk8"

    - name: untar OpenJDK8
      ansible.builtin.shell: tar xzf OpenJDK8U-jdk_x64_mac_hotspot_{{ OPENJDK8_SHORT_VERSION }}.tar.gz
      args:
        chdir: "{{ DEPS_NOARCH }}/openjdk8"
    when: openjdk8.stat.exists == false

  - name: does Mono exist?
    stat: 
      path: "{{ DEPS }}/bin/mcs"
    register: mcs_exe

  - name: install Mono
    block:
    - name: download Mono
      ansible.builtin.shell: if [ ! -e mono-{{ MONO_VERSION }}.tar.xz ] || \
          [ `md5 -q mono-{{ MONO_VERSION }}.tar.xz` != {{ MONO_CHKSUM }} ]; then \
          rm -f mono-{{ MONO_VERSION }}.tar.xz; \
          curl -L -O https://download.mono-project.com/sources/mono/mono-{{ MONO_VERSION }}.tar.xz && \
            [ `md5 -q mono-{{ MONO_VERSION }}.tar.xz` = {{ MONO_CHKSUM }} ] || \
            ( >&2 echo "Failed to download Mono" && exit 1 ); \
        fi
      args:
        chdir: "{{ WORK }}/mono"

    - name: untar Mono
      ansible.builtin.shell: tar xJf mono-{{ MONO_VERSION }}.tar.xz
      args:
        chdir: "{{ WORK }}/mono"

    - name: get build host
      ansible.builtin.shell: ./config.guess | sed "s|^\([^-]*\)\(-.*\)$|{{ ARCH }}\2|" | sed "s|arm64|aarch64|"
      register: build_host_reg
      args:
        chdir: "{{ WORK }}/mono/mono-{{ MONO_VERSION }}"

    - name: build host to var
      ansible.builtin.set_fact:
        build_host_var: "{{ build_host_reg.stdout }}"

    - name: check if struct objc_super has super_class member
      ansible.builtin.shell: sed -n "/^struct *objc_super *{/,/^}/p" < "{{ sdk_path_var }}/usr/include/objc/message.h" | \
        grep -q "super_class;\$" && echo -DHAVE_OBJ_SUPER_SUPER_CLASS
      register: have_obj_super_super_class_reg

    - name: set have_obj_super_super_class var
      ansible.builtin.set_fact:
        have_obj_super_super_class_var: "{{ have_obj_super_super_class_reg.stdout }}"

    - name: configure Mono
      ansible.builtin.shell: CXX="clang++ {{ have_obj_super_super_class_var }} {{ BUILD_TARGET }} -I$PWD/external/bdwgc/libatomic_ops/src" \
        CC="clang {{ have_obj_super_super_class_var }}  {{ BUILD_TARGET }} -I$PWD/external/bdwgc/libatomic_ops/src" \
        PKG_CONFIG_PATH="{{ DEPS }}/lib/pkgconfig" MACOSX_DEPLOYMENT_TARGET="{{ MIN_MACOS_VERSION }}" ARCHS="{{ ARCH }}" PATH="{{ DEPS }}/bin:$PATH" \
        ./configure --disable-nls --prefix="{{ DEPS }}" --build="{{ build_host_var }}" --host="{{ build_host_var }}" --with-static-zlib="{{ DEPS }}/lib/libz.a"
      args:
        chdir: "{{ WORK }}/mono/mono-{{ MONO_VERSION }}"

    - name: patch Mono
      ansible.builtin.shell: sed -i ".orig" "s|/\* \#undef HAVE_UCONTEXT_H \*/|#define HAVE_UCONTEXT_H 1|" config.h && \
        sed -i ".orig" "s|^\(.*\)\(set (CMAKE_SYSTEM_PROCESSOR \)\(\"\${BTLS_ARCH}\")\)|\1\2\3\n\1set (CMAKE_OSX_ARCHITECTURES \3|" mono/btls/CMakeLists.txt && \
        sed -i ".orig" "s|^\( *#ifdef HAVE_UCONTEXT_H *\)$|\1\n#define _XOPEN_SOURCE 600|" mono/utils/mono-sigcontext.h && \
        sed -i ".orig" "s|^\( *#ifdef HAVE_UCONTEXT_H *\)$|\1\n#define _XOPEN_SOURCE 600|" mono/mini/exceptions-amd64.c && \
        sed -i ".orig" "s|^\( *#ifdef HAVE_UCONTEXT_H *\)$|\1\n#define _XOPEN_SOURCE 600|" mono/mini/exceptions-arm64.c && \
        sed -i ".orig" "s|^\( *#if \!defined(__cplusplus) \&\& \!__OBJC2__ *\)$|\1 \&\& !defined(HAVE_OBJ_SUPER_SUPER_CLASS)|" mono/utils/mono-threads-mach-helper.c
      args:
        chdir: "{{ WORK }}/mono/mono-{{ MONO_VERSION }}"

    - name: build Mono
      ansible.builtin.shell: make -j{{ BUILD_CONCURRENCY }} clean && \
        make -j{{ BUILD_CONCURRENCY }} && make -j{{ BUILD_CONCURRENCY }} install
      args:
        chdir: "{{ WORK }}/mono/mono-{{ MONO_VERSION }}"
    when: mcs_exe.stat.exists == false

  - name: does RDKit exist?
    stat: 
      path: "{{ IMAGE }}/libGraphMolWrap.jnilib"
    register: libGraphMolWrap

  - name: install RDKit
    block:
    - name: download RDKit
      ansible.builtin.shell: if [ -n "{{ RDKIT_RELEASE }}" ]; then \
          if [ ! -e "Release_{{ RDKIT_RELEASE }}.tar.gz" ] || \
            [ `md5 -q "Release_{{ RDKIT_RELEASE }}.tar.gz"` != {{ RDKIT_CHKSUM }} ]; then \
            rm -f "Release_{{ RDKIT_RELEASE }}.tar.gz"; \
            curl -L -O "{{ RDKIT_GIT_URL }}/archive/refs/tags/Release_{{ RDKIT_RELEASE }}.tar.gz" && \
              [ `md5 -q "Release_{{ RDKIT_RELEASE }}.tar.gz"` = {{ RDKIT_CHKSUM }} ] || \
              ( >&2 echo "Failed to download RDKit" && exit 1 ); \
          fi; \
          tar xzf "Release_{{ RDKIT_RELEASE }}.tar.gz" && \
          rm -f rdkit && \
          ln -s rdkit-Release_{{ RDKIT_RELEASE }} rdkit; \
        else \
          curl -L -O {{ RDKIT_GIT_URL }}/archive/refs/heads/{{ RDKIT_BRANCH }}.zip && unzip {{ RDKIT_BRANCH }}.zip && \
              ln -s rdkit-{{ RDKIT_BRANCH }} rdkit; \
        fi
      args:
        chdir: "{{ SRC }}"

    - name: patch RDKit
      ansible.builtin.shell: sed -i ".orig" \
          -e "s|\( *\)\(target_link_libraries(MolDraw2D PUBLIC \)\(Cairo::Cairo\)|\1target_include_directories(MolDraw2D PUBLIC {{ DEPS }}/include/cairo)\n\1\2 {{ DEPS }}/lib/libcairo.a {{ DEPS }}/lib/libpixman-1.a {{ DEPS }}/lib/libpng16.a \"-framework CoreFoundation\" \"-framework CoreGraphics\"|" \
          -e "s|\( *\)\(target_link_libraries(MolDraw2D PUBLIC \)\(.*\)\()\)|\1\2\3 {{ DEPS }}/lib/libz.a {{ DEPS }}/lib/libbz2.a\4|" \
          Code/GraphMol/MolDraw2D/CMakeLists.txt && \
        sed -i ".orig" "s|^\( *set(RDKit_SERIALIZATION_LIBS *\${Boost_SERIALIZATION_LIBRARY}\)\()\)|\1 {{ DEPS }}/lib/libz.a {{ DEPS }}/lib/libbz2.a\2|" \
            Code/GraphMol/ChemReactions/CMakeLists.txt && \
        sed -i ".orig" -e "s|if(WIN32)|if(FALSE)|" \
          -e "s|\(SWIG_LINK_LIBRARIES *( *\)\(GraphMolWrap *\)\(\${RDKit_Wrapper_Libs}\)|set(RDKit_Wrapper_Libs \"-Wl,-undefined,error;\${RDKit_Wrapper_Libs};{{ DEPS }}/lib/libcairo.a;{{ DEPS }}/lib/libpixman-1.a;{{ DEPS }}/lib/libpng16.a;{{ DEPS }}/lib/libz.a;{{ DEPS }}/lib/libbz2.a\")\n\1\2\3 \"-framework CoreFoundation\" \"-framework CoreGraphics\"|" \
          Code/JavaWrappers/gmwrapper/CMakeLists.txt && \
        sed -i ".orig" "s|\(SWIG_LINK_LIBRARIES *( *\)\(RDKFuncs *\)\(\${RDKit_Wrapper_Libs}\)|set(RDKit_Wrapper_Libs \"-Wl,-undefined,error;\${RDKit_Wrapper_Libs};{{ DEPS }}/lib/libcairo.a;{{ DEPS }}/lib/libpixman-1.a;{{ DEPS }}/lib/libpng16.a;{{ DEPS }}/lib/libz.a;{{ DEPS }}/lib/libbz2.a\")\n\1\2\3 \"-framework CoreFoundation\" \"-framework CoreGraphics\"|" \
          Code/JavaWrappers/csharp_wrapper/CMakeLists.txt && \
        sed -i ".orig" -e "s|\(AVALONTOOLS_MD5SUM \)\"7a20c25a7e79f3344e0f9f49afa03351\"|\1\"e968b96d7d37677065901b28978fa095\"|" \
          -e "s|\(AVALON_VERSION \)\"2\.0\.5-pre\.3\"|\1\"2.0.6-pre.2\"|" \
          -e "s|\(AVALONTOOLS_URL \"https://github.com/\)rohdebe1\(/ava-formake/archive/refs/tags/AvalonToolkit_\${AVALON_VERSION}.tar.gz\"\)|\1rdkit\2|" \
          External/AvalonTools/CMakeLists.txt && \
        sed -i ".orig" -e "24s|^#if defined SWIGJAVA\$||" \
          -e "25s|^\(%include \"enum\)typeunsafe\(\.swg\"\)\$|\1s\2|" \
          -e "26s|^#endif\$||" \
          Code/JavaWrappers/MolStandardize.i && \
        sed -i ".orig" -e "s|\(assertTrue(\)\((result\.getStatus()\)\( \& PipelineStatus\.[A-Z_]*_ERROR\)\() != PipelineStatus.NO_EVENT)\)|\1PipelineStatus.swigToEnum\2.swigValue()\3.swigValue()\4|" \
          -e "s|\(assertEquals(\)\(result.getStage()\)\(, PipelineStage.[A-Z_]*)\)|\1PipelineStage.swigToEnum((int)\2)\3|" \
          Code/JavaWrappers/gmwrapper/src-test/org/RDKit/MolStandardizeTest.java && \
        sed -i ".orig" "s|\(ForceField/\)UFF/\(DistanceConstraint\.h\)|\1\2|" Code/JavaWrappers/ForceField.i && \
        sed -i ".orig" "s|\(ForceFields::\)UFF::\(DistanceConstraintContrib\)|\1\2|" Code/JavaWrappers/gmwrapper/GraphMolJava.i && \
        sed -i ".orig" "s|\(ForceFields::\)UFF::\(DistanceConstraintContrib\)|\1\2|" Code/JavaWrappers/csharp_wrapper/GraphMolCSharp.i

      args:
        chdir: "{{ SRC }}/rdkit"

    - name: create build sub-directory
      ansible.builtin.shell: mkdir -p build
      args:
        chdir: "{{ SRC }}/rdkit"

    - name: configure RDKit
      ansible.builtin.shell: rm -f CMakeCache.txt && \
        JAVA_HOME="{{ DEPS_NOARCH }}/openjdk8/{{ OPENJDK8_VERSION }}/Contents/Home" \
        PATH="{{ DEPS }}/bin:{{ DEPS_NOARCH }}/openjdk8/{{ OPENJDK8_VERSION }}/Contents/Home/bin:$PATH" \
        FREETYPE_DIR="{{ DEPS }}" \
        "{{ DEPS }}/bin/cmake" \
          -D RDK_BUILD_INCHI_SUPPORT=ON \
          -D RDK_BUILD_AVALON_SUPPORT=ON \
          -D RDK_BUILD_PYTHON_WRAPPERS=OFF \
          -D RDK_BUILD_FREESASA_SUPPORT=ON \
          -D RDK_BUILD_MOLINTERCHANGE_SUPPORT=ON \
          -D RDK_BUILD_COORDGEN_SUPPORT=ON \
          -D RDK_BUILD_CAIRO_SUPPORT=ON \
          -D RDK_INSTALL_INTREE=OFF \
          -D RDK_BUILD_SWIG_WRAPPERS=ON \
          -D RDK_BUILD_SWIG_JAVA_WRAPPER=ON \
          -D RDK_BUILD_SWIG_CSHARP_WRAPPER=ON \
          -D RDK_BUILD_THREADSAFE_SSS=ON \
          -D RDK_USE_BOOST_SERIALIZATION=ON \
          -D RDK_BUILD_CPP_TESTS=ON \
          -D RDK_BUILD_PGSQL=OFF \
          -D Boost_NO_SYSTEM_PATHS=ON \
          -D BOOST_INCLUDEDIR="{{ DEPS }}/include" \
          -D BOOST_LIBRARYDIR="{{ DEPS }}/lib" \
          -D Boost_USE_STATIC_LIBS=ON \
          -D CMAKE_BUILD_TYPE=Release \
          -D EIGEN3_INCLUDE_DIR="{{ DEPS }}/include/eigen3" \
          -D ZLIB_LIBRARY="{{ DEPS }}/lib/libz.a" \
          -D ZLIB_INCLUDE_DIR="{{ DEPS }}/include" \
          -D SWIG_EXECUTABLE="{{ DEPS }}/bin/swig" \
          -D SWIG_DIR="{{ DEPS }}/share/swig/{{ SWIG_VERSION }}" \
          -D CAIRO_INCLUDE_DIR="{{ DEPS }}/include/cairo" \
          -D CAIRO_LIBRARY_DIR="{{ DEPS }}/lib" \
          -D CMAKE_INSTALL_PREFIX="{{ IMAGE }}" \
          -D CMAKE_OSX_DEPLOYMENT_TARGET={{ MIN_MACOS_VERSION }} \
          -D CMAKE_OSX_ARCHITECTURES="{{ ARCH }}" \
          ..
      args:
        chdir: "{{ SRC }}/rdkit/build"

    - name: build RDKit
      ansible.builtin.shell: make -j{{ BUILD_CONCURRENCY }} clean && \
        make -j{{ BUILD_CONCURRENCY }} && make -j{{ BUILD_CONCURRENCY }} install
      args:
        chdir: "{{ SRC }}/rdkit/build"

    - name: test RDKit
      ansible.builtin.shell: export JAVA_ARCH=`echo {{ ARCH }} | sed "s|arm64|aarch64|"` && \
        export JAVA_HOME="`ls -d /Applications/KNIME_*_${JAVA_ARCH}.app/Contents/Eclipse/plugins/org.knime.binary.jre.macosx.${JAVA_ARCH}_*/jre/Contents/Home`" && \
        RDBASE="{{ SRC }}/rdkit" PATH="$JAVA_HOME/bin:$PATH" "{{ DEPS }}/bin/ctest"
      args:
        chdir: "{{ SRC }}/rdkit/build"

    - name: copy RDKit libraries
      ansible.builtin.shell: cp Code/JavaWrappers/gmwrapper/libGraphMolWrap.jnilib Code/JavaWrappers/gmwrapper/org.RDKit*.jar {{ IMAGE }} && \
        cp Code/JavaWrappers/csharp_wrapper/RDKFuncs.dylib Code/JavaWrappers/csharp_wrapper/RDKit2DotNet.dll {{ IMAGE }}
      args:
        chdir: "{{ SRC }}/rdkit"
    when: libGraphMolWrap.stat.exists == false
