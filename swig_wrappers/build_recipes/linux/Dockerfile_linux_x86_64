# Build Linux RDKit Java and C# DLLs for x86_64

ARG ARCH="x86_64"
ARG DEPS="/deps"
ARG WORK="/work"
ARG SRC="/src"
ARG IMAGE="/image"

FROM centos:7 AS build-stage
ARG ARCH
ARG DEPS
ARG WORK
ARG SRC
ARG IMAGE

USER root

ARG BUILD_CONCURRENCY="6"
ARG ZLIB_VERSION="1.3.1"
ARG ZLIB_CHKSUM="9a93b2b7dfdac77ceba5a558a580e74667dd6fede4585b91eefb60f03b72df23"
ARG BZIP2_VERSION="1.0.8"
ARG BZIP2_CHKSUM="67e051268d0c475ea773822f7500d0e5"
ARG LZMA_VERSION="5.6.3"
ARG LZMA_CHKSUM="e7f2caec3e4951673942f45cbf706797"
ARG BOOST_VERSION="1_83_0"
ARG BOOST_CHKSUM="6478edfe2f3305127cffe8caf73ea0176c53769f4bf1585be237eb30798c3b8e"
ARG CMAKE_VERSION="3.27.7"
ARG CMAKE_CHKSUM="0f11cf15c7f2fa6234b9fc415c78029c"
ARG EIGEN_VERSION="3.4.0"
ARG EIGEN_CHKSUM="132dde48fe2b563211675626d29f1707"
ARG FREETYPE_VERSION="2.13.2"
ARG FREETYPE_CHKSUM="d99447cf00c5f2679918f66f2b5771f6"
ARG SWIG_VERSION="4.2.0"
ARG SWIG_CHKSUM="4d03374a2c30367699fa0928e1d901e8"
ARG LIBPNG_VERSION="1.6.40"
ARG LIBPNG_CHKSUM="8f720b363aa08683c9bf2a563236f45313af2c55d542b5481ae17dd8d183bb42"
ARG PIXMAN_VERSION="0.42.2"
ARG PIXMAN_CHKSUM="0a4e327aef89c25f8cb474fbd01de834fd2a1b13fdf7db11ab72072082e45881cd16060673b59d02054b1711ae69c6e2395f6ae9214225ee7153939efcd2fa5d"
ARG CAIRO_VERSION="1.16.0"
ARG CAIRO_CHKSUM="00e81842ae5e81bb0343108884eb5205be0eac14" #sha1
ARG DEVTOOLSET_PATH="/opt/rh/devtoolset-11"

RUN echo -e "\
[base]\n\
name=CentOS-\$releasever - Base\n\
baseurl=http://vault.centos.org/7.9.2009/os/\$basearch/\n\
gpgcheck=1\n\
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7\n\
\n\
[updates]\n\
name=CentOS-\$releasever - Updates\n\
baseurl=http://vault.centos.org/7.9.2009/updates/\$basearch/\n\
gpgcheck=1\n\
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7\n\
\n\
[extras]\n\
name=CentOS-\$releasever - Extras\n\
baseurl=http://vault.centos.org/7.9.2009/extras/\$basearch/\n\
gpgcheck=1\n\
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7\n\
\n\
[centosplus]\n\
name=CentOS-\$releasever - Plus\n\
baseurl=http://vault.centos.org/7.9.2009/centosplus/\$basearch/\n\
gpgcheck=1\n\
enabled=0\n\
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7\n\
\n\
[contrib]\n\
name=CentOS-\$releasever - Contrib\n\
baseurl=http://vault.centos.org/7.9.2009/contrib/\$basearch/\n\
gpgcheck=1\n\
enabled=0\n\
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7\
" > /etc/yum.repos.d/CentOS-Base.repo
RUN yum update -y
RUN echo -e "\
\n\
[centos-sclo-rh]\n\
name=CentOS-\$releasever - SCLo rh\n\
baseurl=http://vault.centos.org/centos/7.9.2009/sclo/\$basearch/rh/\n\
gpgcheck=1\n\
enabled=1\n\
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-SIG-SCLo\n\
\n\
[centos-sclo-sclo]\n\
name=CentOS-\$releasever - SCLo sclo\n\
baseurl=http://vault.centos.org/centos/7.9.2009/sclo/\$basearch/sclo/\n\
gpgcheck=1\n\
enabled=1\n\
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-SIG-SCLo\
" >> /etc/yum.repos.d/CentOS-Base.repo
RUN echo -e "\
-----BEGIN PGP PUBLIC KEY BLOCK-----\n\
Version: GnuPG v2.0.22 (GNU/Linux)\n\
 \n\
mQENBFYM/AoBCADR9Q5cb+H5ndx+QkzNBQ88wcD+g112yvnHNlSiBMOnNEGHuKPJ\n\
tujZ+eWXP3K6ucJckT91WxfQ2fxPr9jQ0xpZytcHcZdTfn3vKL9+OwR0npp+qmcz\n\
rK8/EzVz/SWSgBQ5xT/HUvaeoVAbzBHSng0r2njnBAqABKAoTxgyRGKSCWduKD32\n\
7PF2ZpqeDFFhd99Ykt6ar8SlV8ToqH6F7An0ILeejINVbHUxd6+wsbpcOwQ4mGAa\n\
/CPXeqqLGj62ASBv36xQr34hlN/9zQMViaKkacl8zkuvwhuHf4b4VlGVCe6VILpQ\n\
8ytKMV/lcg7YpMfRq4KVWBjCwkvk6zg6KxaHABEBAAG0aENlbnRPUyBTb2Z0d2Fy\n\
ZUNvbGxlY3Rpb25zIFNJRyAoaHR0cHM6Ly93aWtpLmNlbnRvcy5vcmcvU3BlY2lh\n\
bEludGVyZXN0R3JvdXAvU0NMbykgPHNlY3VyaXR5QGNlbnRvcy5vcmc+iQE5BBMB\n\
CgAjAhsDBwsJCAcDAgEGFQgCCQoLBBYCAwECHgECF4AFAmIgbg0ACgkQTrhOcfLu\n\
nVUzkAgAgJSl++PWo69OGI8eUn53whhfJ6ZyKCOyI9+Flghtfwq1mdcP4dIoAubw\n\
nlQcvEsE4Erob2I1S+n/dXYh9y2+Si3HdXRreKzC1rCSG5ebYRrEqeMoJhBoDFSd\n\
xydtxi03l+Dh2iWtLtXpAM85qHvgIrPfdUnLRVbDBT52Ph5igZl8ux2ooJ94CPm4\n\
yTG/0aPIebNQsLP8LEpa2wad2WJfIeFgjEHranWIzhzapGgwyf2Iu9Sz3L8ljiz2\n\
2HixHpI2es3IqgLyRsTBo2/EdbvMJWlFwiESe1UQIW6ObKNnVabIHUAxZgOlj59o\n\
JhPOzTBG+Ma2fLs+ZFBV88cpKdctFQ==\n\
=+Gr2\n\
-----END PGP PUBLIC KEY BLOCK-----" > /etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-SIG-SCLo
RUN yum install -y devtoolset-11 bzip2 ca-certificates openssl openssl-devel java-1.8.0-openjdk-devel patch git pcre2-devel

RUN curl https://download.mono-project.com/repo/centos7-stable.repo | tee /etc/yum.repos.d/mono-centos7-stable.repo
RUN yum install -y mono-devel

RUN groupadd -g 1005 docker && \
    useradd -u 1005500 -s /bin/bash -g docker docker && \
    mkdir ${SRC} ${WORK} ${IMAGE} ${DEPS} && \
    chown -R docker:docker ${SRC} ${WORK} ${IMAGE} ${DEPS}
RUN mkdir -p /home/docker && chown docker:docker /home/docker
USER docker

RUN mkdir -p ${WORK}/zlib
WORKDIR ${WORK}/zlib
RUN curl -L -O https://zlib.net/zlib-${ZLIB_VERSION}.tar.gz && \
    [ `sha256sum zlib-${ZLIB_VERSION}.tar.gz | awk '{print $1}'` = ${ZLIB_CHKSUM} ] || \
    ( >&2 echo "Failed to download zlib" && exit 1 )
RUN tar xzf zlib-${ZLIB_VERSION}.tar.gz
WORKDIR ${WORK}/zlib/zlib-${ZLIB_VERSION}
RUN source ${DEVTOOLSET_PATH}/enable && CC="gcc -fPIC" ./configure --static --64 --prefix=${DEPS}
RUN source ${DEVTOOLSET_PATH}/enable && make -j${BUILD_CONCURRENCY} && make -j${BUILD_CONCURRENCY} install

RUN mkdir -p ${WORK}/bzip2
WORKDIR ${WORK}/bzip2
RUN curl -L -O https://sourceware.org/pub/bzip2/bzip2-${BZIP2_VERSION}.tar.gz && \
    [ `md5sum bzip2-${BZIP2_VERSION}.tar.gz | awk '{print $1}'` = ${BZIP2_CHKSUM} ] || \
    ( >&2 echo "Failed to download bzip2" && exit 1 )
RUN tar xzf bzip2-${BZIP2_VERSION}.tar.gz
WORKDIR ${WORK}/bzip2/bzip2-${BZIP2_VERSION}
RUN source ${DEVTOOLSET_PATH}/enable && make CC="gcc -fPIC" PREFIX=${DEPS} -j${BUILD_CONCURRENCY}
RUN source ${DEVTOOLSET_PATH}/enable && make CC="gcc -fPIC" PREFIX=${DEPS} -j${BUILD_CONCURRENCY} install

RUN mkdir -p ${WORK}/lzma
WORKDIR ${WORK}/lzma
RUN curl -L -O https://github.com/tukaani-project/xz/releases/download/v${LZMA_VERSION}/xz-${LZMA_VERSION}.tar.gz && \
    [ `md5sum xz-${LZMA_VERSION}.tar.gz | awk '{print $1}'` = ${LZMA_CHKSUM} ] || \
    ( >&2 echo "Failed to download xz" && exit 1 )
RUN tar xzf xz-${LZMA_VERSION}.tar.gz
WORKDIR ${WORK}/lzma/xz-${LZMA_VERSION}
RUN source ${DEVTOOLSET_PATH}/enable && CC="gcc -fPIC" ./configure --enable-shared=no --enable-static=yes --prefix=${DEPS}
RUN source ${DEVTOOLSET_PATH}/enable && make -j${BUILD_CONCURRENCY} && make -j${BUILD_CONCURRENCY} install

RUN mkdir -p ${WORK}/boost
WORKDIR ${WORK}/boost
RUN curl -L -O https://boostorg.jfrog.io/artifactory/main/release/`echo ${BOOST_VERSION} | sed "s|_|.|g"`/source/boost_${BOOST_VERSION}.tar.bz2 && \
    [ `sha256sum boost_${BOOST_VERSION}.tar.bz2 | awk '{print $1}'` = ${BOOST_CHKSUM} ] || \
    ( >&2 echo "Failed to download boost" && exit 1 )
RUN tar xjf boost_${BOOST_VERSION}.tar.bz2
WORKDIR ${WORK}/boost/boost_${BOOST_VERSION}
RUN source ${DEVTOOLSET_PATH}/enable && ./bootstrap.sh --with-libraries=serialization,iostreams,regex,system,program_options --without-icu --prefix=${DEPS}
RUN source ${DEVTOOLSET_PATH}/enable && \
    ./b2 cflags=-fPIC cxxflags=-fPIC --prefix=${DEPS} variant=release link=static \
        --with-serialization --with-iostreams --with-regex --with-system --with-program_options \
        -sBZIP2_INCLUDE=${DEPS}/include -sBZIP2_LIBRARY_PATH=${DEPS}/lib \
        -sZLIB_INCLUDE=${DEPS}/include -sZLIB_LIBRARY_PATH=${DEPS}/lib \
        -sLZMA_INCLUDE=${DEPS}/include -sLZMA_LIBRARY_PATH=${DEPS}/lib \
        install
# change bz2 lzma z into /deps/lib/libbz2.a /deps/lib/liblzma.a /deps/lib/libz.a
# to avoid libboost_iostreams link errors downstream
RUN sed -i "s/\([ :;]\)\(bz2\|lzma\|z\)/\1\${_BOOST_LIBDIR}\/lib\2.a/g" \
    ${DEPS}/lib/cmake/boost_iostreams-`echo -n ${BOOST_VERSION} | tr _ .`/libboost_iostreams-variant-static.cmake

RUN mkdir -p ${WORK}/cmake
WORKDIR ${WORK}/cmake
RUN curl -L -O https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}.tar.gz && \
    [ `md5sum cmake-${CMAKE_VERSION}.tar.gz | awk '{print $1}'` = ${CMAKE_CHKSUM} ] || \
    ( >&2 echo "Failed to download cmake" && exit 1 )
RUN tar xzf cmake-${CMAKE_VERSION}.tar.gz
WORKDIR ${WORK}/cmake/cmake-${CMAKE_VERSION}
RUN source ${DEVTOOLSET_PATH}/enable && ./bootstrap --prefix=${DEPS} --parallel=${BUILD_CONCURRENCY}
RUN source ${DEVTOOLSET_PATH}/enable && make -j${BUILD_CONCURRENCY} && make -j${BUILD_CONCURRENCY} install

RUN mkdir -p ${WORK}/eigen
WORKDIR ${WORK}/eigen
RUN curl -L -o eigen-${EIGEN_VERSION}.tar.bz2 https://gitlab.com/libeigen/eigen/-/archive/${EIGEN_VERSION}/eigen-${EIGEN_VERSION}.tar.bz2 && \
    [ `md5sum eigen-${EIGEN_VERSION}.tar.bz2 | awk '{print $1}'` = ${EIGEN_CHKSUM} ] || \
    ( >&2 echo "Failed to download eigen" && exit 1 )
RUN tar xjf eigen-${EIGEN_VERSION}.tar.bz2
WORKDIR ${WORK}/eigen/eigen-${EIGEN_VERSION}
RUN mkdir build
WORKDIR ${WORK}/eigen/eigen-${EIGEN_VERSION}/build
RUN source ${DEVTOOLSET_PATH}/enable && ${DEPS}/bin/cmake -DCMAKE_INSTALL_PREFIX=${DEPS} ..
RUN source ${DEVTOOLSET_PATH}/enable && make -j${BUILD_CONCURRENCY} install

RUN mkdir -p ${WORK}/swig
WORKDIR ${WORK}/swig
RUN rm -f swig-${SWIG_VERSION}.tar.gz
# Occasionally files downloaded from SourceForge are corrupted, so we try up to 5 times
RUN for i in `seq 1 5`; do \
        curl -L -o swig-${SWIG_VERSION}.tar.gz https://sourceforge.net/projects/swig/files/swig/swig-${SWIG_VERSION}/swig-${SWIG_VERSION}.tar.gz/download && \
        [ `md5sum swig-${SWIG_VERSION}.tar.gz | awk '{print $1}'` = ${SWIG_CHKSUM} ] && touch swig_md5_ok && break; \
    done
RUN test -e swig_md5_ok || ( >&2 echo "Failed to download SWIG" && exit 1 )
RUN tar xzf swig-${SWIG_VERSION}.tar.gz
WORKDIR ${WORK}/swig/swig-${SWIG_VERSION}
RUN source ${DEVTOOLSET_PATH}/enable && ./configure --prefix=${DEPS}
RUN source ${DEVTOOLSET_PATH}/enable && make -j${BUILD_CONCURRENCY} && make -j${BUILD_CONCURRENCY} install

RUN mkdir -p ${WORK}/freetype
WORKDIR ${WORK}/freetype
RUN for i in `seq 1 5`; do \
        curl -L -o freetype-${FREETYPE_VERSION}.tar.gz https://sourceforge.net/projects/freetype/files/freetype2/${FREETYPE_VERSION}/freetype-${FREETYPE_VERSION}.tar.gz/download && \
        [ `md5sum freetype-${FREETYPE_VERSION}.tar.gz | awk '{print $1}'` = ${FREETYPE_CHKSUM} ] && touch freetype_md5_ok && break; \
    done
RUN test -e freetype_md5_ok || ( >&2 echo "Failed to download freetype" && exit 1 )
RUN tar xzf freetype-${FREETYPE_VERSION}.tar.gz
WORKDIR ${WORK}/freetype/freetype-${FREETYPE_VERSION}
RUN source ${DEVTOOLSET_PATH}/enable && CC="gcc -fPIC" CXX="g++ -fPIC" \
    PKG_CONFIG_PATH=${DEPS}/lib/pkgconfig \
    ./configure --enable-static=yes --enable-shared=no --prefix=${DEPS}
RUN source ${DEVTOOLSET_PATH}/enable && make -j${BUILD_CONCURRENCY} && make -j${BUILD_CONCURRENCY} install

RUN mkdir -p ${WORK}/cairo
WORKDIR ${WORK}/cairo
RUN for i in `seq 1 5`; do \
        curl -L -O https://download.sourceforge.net/libpng/libpng-${LIBPNG_VERSION}.tar.gz && \
        [ `sha256sum libpng-${LIBPNG_VERSION}.tar.gz | awk '{print $1}'` = ${LIBPNG_CHKSUM} ] && touch libpng_sha256_ok && break; \
    done
RUN test -e libpng_sha256_ok || ( >&2 echo "Failed to download libpng" && exit 1 )
RUN tar xzf libpng-${LIBPNG_VERSION}.tar.gz
WORKDIR ${WORK}/cairo/libpng-${LIBPNG_VERSION}
RUN source ${DEVTOOLSET_PATH}/enable && CC="gcc -fPIC" \
    PKG_CONFIG_PATH=${DEPS}/lib/pkgconfig \
    ./configure --enable-shared=no --enable-static=yes --prefix=${DEPS}
RUN source ${DEVTOOLSET_PATH}/enable && make -j${BUILD_CONCURRENCY} && make -j${BUILD_CONCURRENCY} install

WORKDIR ${WORK}/cairo
RUN curl -L -O https://www.cairographics.org/releases/pixman-${PIXMAN_VERSION}.tar.gz && \
    [ `sha512sum pixman-${PIXMAN_VERSION}.tar.gz | awk '{print $1}'` = ${PIXMAN_CHKSUM} ] || \
    ( >&2 echo "Failed to download pixman" && exit 1 )
RUN tar xzf pixman-${PIXMAN_VERSION}.tar.gz
WORKDIR ${WORK}/cairo/pixman-${PIXMAN_VERSION}
RUN source ${DEVTOOLSET_PATH}/enable && CC="gcc -fPIC" \
    PKG_CONFIG_PATH=${DEPS}/lib/pkgconfig \
    ./configure --enable-shared=no --enable-static=yes --prefix=${DEPS}
RUN source ${DEVTOOLSET_PATH}/enable && make -j${BUILD_CONCURRENCY} && make -j${BUILD_CONCURRENCY} install

WORKDIR ${WORK}/cairo
RUN curl -L -O https://www.cairographics.org/releases/cairo-${CAIRO_VERSION}.tar.xz && \
    [ `sha1sum cairo-${CAIRO_VERSION}.tar.xz | awk '{print $1}'` = ${CAIRO_CHKSUM} ] || \
    ( >&2 echo "Failed to download cairo" && exit 1 )
RUN tar xJf cairo-${CAIRO_VERSION}.tar.xz
WORKDIR ${WORK}/cairo/cairo-${CAIRO_VERSION}
RUN source ${DEVTOOLSET_PATH}/enable && CC="gcc -fPIC" CXX="g++ -fPIC" \
    PKG_CONFIG_PATH=${DEPS}/lib/pkgconfig \
    ./configure --enable-shared=no --enable-static=yes --prefix=${DEPS}
RUN source ${DEVTOOLSET_PATH}/enable && make -j${BUILD_CONCURRENCY} && make -j${BUILD_CONCURRENCY} install

WORKDIR ${SRC}
ARG RDKIT_RELEASE="2024_09_2"
ARG RDKIT_CHKSUM="70eaa9001bfce5b090129eda93d68d06"
ARG RDKIT_GIT_URL="https://github.com/rdkit/rdkit"
ARG RDKIT_BRANCH="master"
RUN if [ -n "${RDKIT_RELEASE}" ]; then \
        curl -L -O ${RDKIT_GIT_URL}/archive/refs/tags/Release_${RDKIT_RELEASE}.tar.gz && \
            [ `md5sum Release_${RDKIT_RELEASE}.tar.gz | awk '{print $1}'` = ${RDKIT_CHKSUM} ] || \
            ( >&2 echo "Failed to download RDKit" && exit 1 ); \
        tar xzf Release_${RDKIT_RELEASE}.tar.gz && \
        ln -s rdkit-Release_${RDKIT_RELEASE} rdkit; \
    else \
        curl -L -O ${RDKIT_GIT_URL}/archive/refs/heads/${RDKIT_BRANCH}.zip && unzip ${RDKIT_BRANCH}.zip && \
            ln -s rdkit-${RDKIT_BRANCH} rdkit; \
    fi
WORKDIR ${SRC}/rdkit
RUN sed -i -e "s|\( *\)\(target_link_libraries(MolDraw2D PUBLIC \)\(Cairo::Cairo\)|\1target_include_directories(MolDraw2D PUBLIC ${DEPS}/include/cairo)\n\1\2 ${DEPS}/lib/libcairo.a ${DEPS}/lib/libpixman-1.a ${DEPS}/lib/libpng16.a|" \
    -e "s|\( *\)\(target_link_libraries(MolDraw2D PUBLIC \)\(.*\)\()\)|\1\2\3 ${DEPS}/lib/libz.a ${DEPS}/lib/libbz2.a ${DEPS}/lib/liblzma.a\4|" \
    Code/GraphMol/MolDraw2D/CMakeLists.txt
RUN sed -i "s|^\( *set(RDKit_SERIALIZATION_LIBS *\${Boost_SERIALIZATION_LIBRARY}\)\()\)|\1 ${DEPS}/lib/libz.a ${DEPS}/lib/libbz2.a ${DEPS}/lib/liblzma.a\2|" \
    Code/GraphMol/ChemReactions/CMakeLists.txt
RUN sed -i -e "s|if(WIN32)|if(FALSE)|" \
    -e "s|\(SWIG_LINK_LIBRARIES *( *\)\(GraphMolWrap *\)\(\${RDKit_Wrapper_Libs}\)|set(RDKit_Wrapper_Libs \"-Wl,--no-undefined;\${RDKit_Wrapper_Libs};${DEPS}/lib/libcairo.a;${DEPS}/lib/libpixman-1.a;${DEPS}/lib/libpng16.a;${DEPS}/lib/libz.a;${DEPS}/lib/libbz2.a;${DEPS}/lib/liblzma.a\")\n\1\2 \3|" \
    Code/JavaWrappers/gmwrapper/CMakeLists.txt
RUN sed -i "s|\(SWIG_LINK_LIBRARIES *( *\)\(RDKFuncs *\)\(\${RDKit_Wrapper_Libs}\)|set(RDKit_Wrapper_Libs \"-Wl,--no-undefined;\${RDKit_Wrapper_Libs};${DEPS}/lib/libcairo.a;${DEPS}/lib/libpixman-1.a;${DEPS}/lib/libpng16.a;${DEPS}/lib/libz.a;${DEPS}/lib/libbz2.a;${DEPS}/lib/liblzma.a\")\n\1\2 \3|" \
    Code/JavaWrappers/csharp_wrapper/CMakeLists.txt

# Patch for Avalon
RUN sed -i -e "s|\(AVALONTOOLS_MD5SUM \)\"7a20c25a7e79f3344e0f9f49afa03351\"|\1\"e968b96d7d37677065901b28978fa095\"|" \
    -e "s|\(AVALON_VERSION \)\"2\.0\.5-pre\.3\"|\1\"2.0.6-pre.2\"|" \
    -e "s|\(AVALONTOOLS_URL \"https://github.com/\)rohdebe1\(/ava-formake/archive/refs/tags/AvalonToolkit_\${AVALON_VERSION}.tar.gz\"\)|\1rdkit\2|" \
    External/AvalonTools/CMakeLists.txt

# Patch for #7972
RUN sed -i -e "24s|^#if defined SWIGJAVA\$||" \
    -e "25s|^\(%include \"enum\)typeunsafe\(\.swg\"\)\$|\1s\2|" \
    -e "26s|^#endif\$||" \
    Code/JavaWrappers/MolStandardize.i
RUN sed -i -e "s|\(assertTrue(\)\((result\.getStatus()\)\( \& PipelineStatus\.[A-Z_]*_ERROR\)\() != PipelineStatus.NO_EVENT)\)|\1PipelineStatus.swigToEnum\2.swigValue()\3.swigValue()\4|" \
    -e "s|\(assertEquals(\)\(result.getStage()\)\(, PipelineStage.[A-Z_]*)\)|\1PipelineStage.swigToEnum((int)\2)\3|" \
    Code/JavaWrappers/gmwrapper/src-test/org/RDKit/MolStandardizeTest.java

# Patch for #8019
RUN sed -i "s|\(ForceField/\)UFF/\(DistanceConstraint\.h\)|\1\2|" Code/JavaWrappers/ForceField.i
RUN sed -i "s|\(ForceFields::\)UFF::\(DistanceConstraintContrib\)|\1\2|" Code/JavaWrappers/gmwrapper/GraphMolJava.i
RUN sed -i "s|\(ForceFields::\)UFF::\(DistanceConstraintContrib\)|\1\2|" Code/JavaWrappers/csharp_wrapper/GraphMolCSharp.i

RUN mkdir build
WORKDIR ${SRC}/rdkit/build
RUN source ${DEVTOOLSET_PATH}/enable && FREETYPE_DIR=${DEPS} ${DEPS}/bin/cmake \
    -D RDK_BUILD_INCHI_SUPPORT=ON \
    -D RDK_BUILD_AVALON_SUPPORT=ON \
    -D RDK_BUILD_PYTHON_WRAPPERS=OFF \
    -D RDK_BUILD_FREESASA_SUPPORT=ON \
    -D RDK_BUILD_MOLINTERCHANGE_SUPPORT=ON \
    -D RDK_BUILD_COORDGEN_SUPPORT=ON \
    -D RDK_BUILD_CAIRO_SUPPORT=ON \
    -D RDK_INSTALL_INTREE=OFF \
    -D RDK_BUILD_SWIG_WRAPPERS=ON \
    -D RDK_BUILD_SWIG_JAVA_WRAPPER=ON \
    -D RDK_BUILD_SWIG_CSHARP_WRAPPER=ON \
    -D RDK_BUILD_THREADSAFE_SSS=ON \
    -D RDK_USE_BOOST_SERIALIZATION=ON \
    -D RDK_BUILD_CPP_TESTS=ON \
    -D RDK_BUILD_PGSQL=OFF \
    -D Boost_NO_SYSTEM_PATHS=ON \
    -D BOOST_INCLUDEDIR=${DEPS}/include \
    -D BOOST_LIBRARYDIR=${DEPS}/lib \
    -D Boost_USE_STATIC_LIBS=ON \
    -D CMAKE_BUILD_TYPE=Release \
    -D EIGEN3_INCLUDE_DIR=${DEPS}/include/eigen3 \
    -D ZLIB_LIBRARY=${DEPS}/lib/libz.a \
    -D ZLIB_INCLUDE_DIR=${DEPS}/include \
    -D SWIG_EXECUTABLE=${DEPS}/bin/swig \
    -D SWIG_DIR=${DEPS}/share/swig/${SWIG_VERSION} \
    -D CAIRO_INCLUDE_DIR=${DEPS}/include/cairo \
    -D CAIRO_LIBRARY_DIR=${DEPS}/lib \
    -D CMAKE_INSTALL_PREFIX=${IMAGE} \
    ..
RUN source ${DEVTOOLSET_PATH}/enable && make -j${BUILD_CONCURRENCY} && make -j${BUILD_CONCURRENCY} install
RUN RDBASE=${SRC}/rdkit ${DEPS}/bin/ctest

FROM scratch as export-stage
ARG ARCH
ARG SRC
COPY --from=build-stage ${SRC}/rdkit/Code/JavaWrappers/gmwrapper/org.RDKit.jar /${ARCH}/org.RDKit.jar
COPY --from=build-stage ${SRC}/rdkit/Code/JavaWrappers/gmwrapper/org.RDKitDoc.jar /${ARCH}/org.RDKitDoc.jar
COPY --from=build-stage ${SRC}/rdkit/Code/JavaWrappers/gmwrapper/libGraphMolWrap.so /${ARCH}/libGraphMolWrap.so
COPY --from=build-stage ${SRC}/rdkit/Code/JavaWrappers/csharp_wrapper/RDKFuncs.so /${ARCH}/RDKFuncs.so
COPY --from=build-stage ${SRC}/rdkit/Code/JavaWrappers/csharp_wrapper/RDKit2DotNet.dll /${ARCH}/RDKit2DotNet.dll
