# Build Linux RDKit Java and C# DLLs for x86_64

ARG ARCH="x86_64"
ARG DEPS="/deps"
ARG WORK="/work"
ARG SRC="/src"
ARG IMAGE="/image"
# ARG RDKIT_RELEASE="2022_09_3"
# ARG RDKIT_CHKSUM="1c2df38b2578cebadb64cc76753a6e5c"
ARG RDKIT_GIT_URL="https://github.com/rdkit/rdkit"
ARG RDKIT_BRANCH="master"

FROM centos:7 AS build-stage
ARG ARCH
ARG DEPS
ARG WORK
ARG SRC
ARG IMAGE
ARG RDKIT_RELEASE
ARG RDKIT_CHKSUM
ARG RDKIT_GIT_URL
ARG RDKIT_BRANCH

USER root

ARG BUILD_CONCURRENCY="6"
ARG ZLIB_VERSION="1.2.13"
ARG ZLIB_CHKSUM="9b8aa094c4e5765dabf4da391f00d15c"
ARG BZIP2_VERSION="1.0.8"
ARG BZIP2_CHKSUM="67e051268d0c475ea773822f7500d0e5"
ARG BOOST_VERSION="1_80_0"
ARG BOOST_CHKSUM="df7dc2fc6de751753198a5bf70210da7"
ARG CMAKE_VERSION="3.24.2"
ARG CMAKE_CHKSUM="84d08f30b110401d8178f0708c19f1fe"
ARG EIGEN_VERSION="3.4.0"
ARG EIGEN_CHKSUM="132dde48fe2b563211675626d29f1707"
ARG FREETYPE_VERSION="2.12.1"
ARG FREETYPE_CHKSUM="8bc5c9c9df7ac12c504f8918552a7cf2"
ARG SWIG_VERSION="3.0.12"
ARG SWIG_CHKSUM="82133dfa7bba75ff9ad98a7046be687c"
ARG LIBPNG_VERSION="1.6.38"
ARG LIBPNG_CHKSUM="151d579116e601e393e780b7f46b2ff0"
ARG PIXMAN_VERSION="0.42.0"
ARG PIXMAN_CHKSUM="d925aa9e9ed9d419b6c2e02a61a11d29"
ARG CAIRO_VERSION="1.16.0"
ARG CAIRO_CHKSUM="f19e0353828269c22bd72e271243a552"
ARG DEVTOOLSET_PATH="/opt/rh/devtoolset-11"

RUN yum update -y
RUN yum install -y centos-release-scl
RUN yum install -y devtoolset-11 bzip2 ca-certificates openssl openssl-devel java-1.8.0-openjdk-devel patch git

RUN curl https://download.mono-project.com/repo/centos7-stable.repo | tee /etc/yum.repos.d/mono-centos7-stable.repo
RUN yum install -y mono-devel

RUN groupadd -g 1005 docker && \
    useradd -u 1005500 -s /bin/bash -g docker docker && \
    mkdir ${SRC} ${WORK} ${IMAGE} ${DEPS} && \
    chown -R docker:docker ${SRC} ${WORK} ${IMAGE} ${DEPS}
RUN mkdir -p /home/docker && chown docker:docker /home/docker
USER docker
RUN mkdir -p ${WORK}/boost ${WORK}/cmake ${WORK}/eigen ${WORK}/zlib ${WORK}/bzip2 ${WORK}/freetype ${WORK}/swig ${WORK}/cairo

WORKDIR ${WORK}/zlib
RUN curl -L -O https://zlib.net/zlib-${ZLIB_VERSION}.tar.gz && \
    [ `md5sum zlib-${ZLIB_VERSION}.tar.gz | awk '{print $1}'` = ${ZLIB_CHKSUM} ] || \
    ( >&2 echo "Failed to download zlib" && exit 1 )
RUN tar xzf zlib-${ZLIB_VERSION}.tar.gz
WORKDIR ${WORK}/zlib/zlib-${ZLIB_VERSION}
RUN source ${DEVTOOLSET_PATH}/enable && CC="gcc -fPIC" ./configure --static --64 --prefix=${DEPS}
RUN source ${DEVTOOLSET_PATH}/enable && make -j${BUILD_CONCURRENCY} && make -j${BUILD_CONCURRENCY} install

WORKDIR ${WORK}/bzip2
RUN curl -L -O https://sourceware.org/pub/bzip2/bzip2-${BZIP2_VERSION}.tar.gz && \
    [ `md5sum bzip2-${BZIP2_VERSION}.tar.gz | awk '{print $1}'` = ${BZIP2_CHKSUM} ] || \
    ( >&2 echo "Failed to download bzip2" && exit 1 )
RUN tar xzf bzip2-${BZIP2_VERSION}.tar.gz
WORKDIR ${WORK}/bzip2/bzip2-${BZIP2_VERSION}
RUN source ${DEVTOOLSET_PATH}/enable && make CC="gcc -fPIC" PREFIX=${DEPS} -j${BUILD_CONCURRENCY}
RUN source ${DEVTOOLSET_PATH}/enable && make CC="gcc -fPIC" PREFIX=${DEPS} -j${BUILD_CONCURRENCY} install

WORKDIR ${WORK}/boost
RUN curl -L -O https://boostorg.jfrog.io/artifactory/main/release/`echo ${BOOST_VERSION} | sed "s|_|.|g"`/source/boost_${BOOST_VERSION}.tar.bz2 && \
    [ `md5sum boost_${BOOST_VERSION}.tar.bz2 | awk '{print $1}'` = ${BOOST_CHKSUM} ] || \
    ( >&2 echo "Failed to download boost" && exit 1 )
RUN tar xjf boost_${BOOST_VERSION}.tar.bz2
WORKDIR ${WORK}/boost/boost_${BOOST_VERSION}
RUN source ${DEVTOOLSET_PATH}/enable && ./bootstrap.sh --with-libraries=serialization,iostreams,regex,system --without-icu --prefix=${DEPS}
RUN source ${DEVTOOLSET_PATH}/enable && \
    ./b2 cflags=-fPIC cxxflags=-fPIC --prefix=${WORK}/boost/install variant=release link=static \
        --with-serialization --with-iostreams --with-regex --with-system \
        -sBZIP2_INCLUDE=${DEPS}/include -sBZIP2_LIBPATH=${DEPS}/lib \
        -sZLIB_INCLUDE=${DEPS}/include -sZLIB_LIBPATH=${DEPS}/lib && \
        cp -R stage/lib ${DEPS} && cp -R boost ${DEPS}/include

WORKDIR ${WORK}/cmake
RUN curl -L -O https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}.tar.gz && \
    [ `md5sum cmake-${CMAKE_VERSION}.tar.gz | awk '{print $1}'` = ${CMAKE_CHKSUM} ] || \
    ( >&2 echo "Failed to download cmake" && exit 1 )
RUN tar xzf cmake-${CMAKE_VERSION}.tar.gz
WORKDIR ${WORK}/cmake/cmake-${CMAKE_VERSION}
RUN source ${DEVTOOLSET_PATH}/enable && ./bootstrap --prefix=${DEPS} --parallel=${BUILD_CONCURRENCY}
RUN source ${DEVTOOLSET_PATH}/enable && make -j${BUILD_CONCURRENCY} && make -j${BUILD_CONCURRENCY} install

WORKDIR ${WORK}/eigen
RUN curl -L -o eigen-${EIGEN_VERSION}.tar.bz2 https://gitlab.com/libeigen/eigen/-/archive/${EIGEN_VERSION}/eigen-${EIGEN_VERSION}.tar.bz2 && \
    [ `md5sum eigen-${EIGEN_VERSION}.tar.bz2 | awk '{print $1}'` = ${EIGEN_CHKSUM} ] || \
    ( >&2 echo "Failed to download eigen" && exit 1 )
RUN tar xjf eigen-${EIGEN_VERSION}.tar.bz2
WORKDIR ${WORK}/eigen/eigen-${EIGEN_VERSION}
RUN mkdir build
WORKDIR ${WORK}/eigen/eigen-${EIGEN_VERSION}/build
RUN source ${DEVTOOLSET_PATH}/enable && ${DEPS}/bin/cmake -DCMAKE_INSTALL_PREFIX=${DEPS} ..
RUN source ${DEVTOOLSET_PATH}/enable && make -j${BUILD_CONCURRENCY} install

RUN mkdir -p ${WORK}/swig
WORKDIR ${WORK}/swig
RUN rm -f swig-${SWIG_VERSION}.tar.gz
# Occasionally files downloaded from SourceForge are corrupted, so we try up to 5 times
RUN for i in `seq 1 5`; do \
        curl -L -o swig-${SWIG_VERSION}.tar.gz https://sourceforge.net/projects/swig/files/swig/swig-${SWIG_VERSION}/swig-${SWIG_VERSION}.tar.gz/download && \
        [ `md5sum swig-${SWIG_VERSION}.tar.gz | awk '{print $1}'` = ${SWIG_CHKSUM} ] && touch swig_md5_ok && break; \
    done
RUN test -e swig_md5_ok || ( >&2 echo "Failed to download SWIG" && exit 1 )
RUN tar xzf swig-${SWIG_VERSION}.tar.gz
WORKDIR ${WORK}/swig/swig-${SWIG_VERSION}
RUN source ${DEVTOOLSET_PATH}/enable && ./configure --prefix=${DEPS}
RUN source ${DEVTOOLSET_PATH}/enable && make -j${BUILD_CONCURRENCY} && make -j${BUILD_CONCURRENCY} install

RUN mkdir -p ${WORK}/freetype
WORKDIR ${WORK}/freetype
RUN curl -L -O https://download.savannah.gnu.org/releases/freetype/freetype-${FREETYPE_VERSION}.tar.gz && \
    [ `md5sum freetype-${FREETYPE_VERSION}.tar.gz | awk '{print $1}'` = ${FREETYPE_CHKSUM} ] || \
    ( >&2 echo "Failed to download freetype" && exit 1 )
RUN tar xzf freetype-${FREETYPE_VERSION}.tar.gz
WORKDIR ${WORK}/freetype/freetype-${FREETYPE_VERSION}
RUN source ${DEVTOOLSET_PATH}/enable && CC="gcc -fPIC" CXX="g++ -fPIC" \
    PKG_CONFIG_PATH=${DEPS}/lib/pkgconfig \
    ./configure --enable-static=yes --enable-shared=no --prefix=${DEPS}
RUN source ${DEVTOOLSET_PATH}/enable && make -j${BUILD_CONCURRENCY} && make -j${BUILD_CONCURRENCY} install

WORKDIR ${WORK}/cairo
RUN for i in `seq 1 5`; do \
        curl -L -O https://download.sourceforge.net/libpng/libpng-${LIBPNG_VERSION}.tar.gz && \
        [ `md5sum libpng-${LIBPNG_VERSION}.tar.gz | awk '{print $1}'` = ${LIBPNG_CHKSUM} ] && touch libpng_md5_ok && break; \
    done
RUN test -e libpng_md5_ok || ( >&2 echo "Failed to download libpng" && exit 1 )
RUN tar xzf libpng-${LIBPNG_VERSION}.tar.gz
WORKDIR ${WORK}/cairo/libpng-${LIBPNG_VERSION}
RUN source ${DEVTOOLSET_PATH}/enable && CC="gcc -fPIC" \
    PKG_CONFIG_PATH=${DEPS}/lib/pkgconfig \
    ./configure --enable-shared=no --enable-static=yes --prefix=${DEPS}
RUN source ${DEVTOOLSET_PATH}/enable && make -j${BUILD_CONCURRENCY} && make -j${BUILD_CONCURRENCY} install

WORKDIR ${WORK}/cairo
RUN curl -L -O https://www.cairographics.org/releases/pixman-${PIXMAN_VERSION}.tar.gz && \
    [ `md5sum pixman-${PIXMAN_VERSION}.tar.gz | awk '{print $1}'` = ${PIXMAN_CHKSUM} ] || \
    ( >&2 echo "Failed to download pixman" && exit 1 )
RUN tar xzf pixman-${PIXMAN_VERSION}.tar.gz
WORKDIR ${WORK}/cairo/pixman-${PIXMAN_VERSION}
RUN source ${DEVTOOLSET_PATH}/enable && CC="gcc -fPIC" \
    PKG_CONFIG_PATH=${DEPS}/lib/pkgconfig \
    ./configure --enable-shared=no --enable-static=yes --prefix=${DEPS}
RUN source ${DEVTOOLSET_PATH}/enable && make -j${BUILD_CONCURRENCY} && make -j${BUILD_CONCURRENCY} install

WORKDIR ${WORK}/cairo
RUN curl -L -O https://www.cairographics.org/releases/cairo-${CAIRO_VERSION}.tar.xz && \
    [ `md5sum cairo-${CAIRO_VERSION}.tar.xz | awk '{print $1}'` = ${CAIRO_CHKSUM} ] || \
    ( >&2 echo "Failed to download cairo" && exit 1 )
RUN tar xJf cairo-${CAIRO_VERSION}.tar.xz
WORKDIR ${WORK}/cairo/cairo-${CAIRO_VERSION}
RUN source ${DEVTOOLSET_PATH}/enable && CC="gcc -fPIC" CXX="g++ -fPIC" \
    PKG_CONFIG_PATH=${DEPS}/lib/pkgconfig \
    ./configure --enable-shared=no --enable-static=yes --prefix=${DEPS}
RUN source ${DEVTOOLSET_PATH}/enable && make -j${BUILD_CONCURRENCY} && make -j${BUILD_CONCURRENCY} install

WORKDIR ${SRC}
RUN if [ -n "${RDKIT_RELEASE}" ]; then \
        curl -L -O ${RDKIT_GIT_URL}/archive/refs/tags/Release_${RDKIT_RELEASE}.tar.gz && \
            [ `md5sum Release_${RDKIT_RELEASE}.tar.gz | awk '{print $1}'` = ${RDKIT_CHKSUM} ] || \
            ( >&2 echo "Failed to download RDKit" && exit 1 ); \
        tar xzf Release_${RDKIT_RELEASE}.tar.gz && \
        ln -s rdkit-Release_${RDKIT_RELEASE} rdkit; \
    else \
        git clone ${RDKIT_GIT_URL}.git && cd rdkit && git checkout ${RDKIT_BRANCH}; \
    fi
WORKDIR ${SRC}/rdkit
RUN sed -i -e "s|\( *\)\(target_link_libraries(MolDraw2D PUBLIC \)\(Cairo::Cairo\)|\1target_include_directories(MolDraw2D PUBLIC ${DEPS}/include/cairo)\n\1\2 ${DEPS}/lib/libcairo.a ${DEPS}/lib/libpixman-1.a ${DEPS}/lib/libpng16.a|" \
    -e "s|\( *\)\(target_link_libraries(MolDraw2D PUBLIC \)\(.*\)\()\)|\1\2\3 ${DEPS}/lib/libz.a ${DEPS}/lib/libbz2.a\4|" \
    Code/GraphMol/MolDraw2D/CMakeLists.txt
RUN sed -i "s|^\( *set(RDKit_SERIALIZATION_LIBS *\${Boost_SERIALIZATION_LIBRARY}\)\()\)|\1 ${DEPS}/lib/libz.a ${DEPS}/lib/libbz2.a\2|" \
    Code/GraphMol/ChemReactions/CMakeLists.txt
RUN sed -i -e "s|if(WIN32)|if(FALSE)|" \
    -e "s|SWIG_LINK_LIBRARIES|set(RDKit_Wrapper_Libs \"-Wl,--no-undefined;\${RDKit_Wrapper_Libs};${DEPS}/lib/libcairo.a;${DEPS}/lib/libpixman-1.a;${DEPS}/lib/libpng16.a;${DEPS}/lib/libz.a;${DEPS}/lib/libbz2.a\")\n&|" \
    Code/JavaWrappers/gmwrapper/CMakeLists.txt
RUN sed -i "s|SWIG_LINK_LIBRARIES|set(RDKit_Wrapper_Libs \"-Wl,--no-undefined;\${RDKit_Wrapper_Libs};${DEPS}/lib/libcairo.a;${DEPS}/lib/libpixman-1.a;${DEPS}/lib/libpng16.a;${DEPS}/lib/libz.a;${DEPS}/lib/libbz2.a\")\n&|" \
    Code/JavaWrappers/csharp_wrapper/CMakeLists.txt

# Patch for SWIG loggers
RUN sed -i "s|^\(.include <RDGeneral/\)\(versions.h>\)|\1\2\n\1RDLog.h>|" Code/JavaWrappers/gmwrapper/GraphMolJava.i
RUN sed -i "s|^\(.include <RDGeneral/\)\(versions.h>\)|\1\2\n\1RDLog.h>|" Code/JavaWrappers/csharp_wrapper/GraphMolCSharp.i

RUN mkdir build
WORKDIR ${SRC}/rdkit/build
RUN source ${DEVTOOLSET_PATH}/enable && FREETYPE_DIR=${DEPS} ${DEPS}/bin/cmake \
    -D RDK_BUILD_INCHI_SUPPORT=ON \
    -D RDK_BUILD_AVALON_SUPPORT=ON \
    -D RDK_BUILD_PYTHON_WRAPPERS=OFF \
    -D RDK_BUILD_FREESASA_SUPPORT=ON \
    -D RDK_BUILD_MOLINTERCHANGE_SUPPORT=ON \
    -D RDK_BUILD_COORDGEN_SUPPORT=ON \
    -D RDK_BUILD_CAIRO_SUPPORT=ON \
    -D RDK_INSTALL_INTREE=OFF \
    -D RDK_BUILD_SWIG_WRAPPERS=ON \
    -D RDK_BUILD_SWIG_JAVA_WRAPPER=ON \
    -D RDK_BUILD_SWIG_CSHARP_WRAPPER=ON \
    -D RDK_BUILD_THREADSAFE_SSS=ON \
    -D RDK_USE_BOOST_SERIALIZATION=ON \
    -D RDK_BUILD_CPP_TESTS=ON \
    -D RDK_BUILD_PGSQL=OFF \
    -D Boost_INCLUDE_DIR=${DEPS}/include \
    -D Boost_LIBRARY_DIR=${DEPS}/lib \
    -D Boost_NO_SYSTEM_PATHS=ON \
    -D Boost_NO_BOOST_CMAKE=ON \
    -D Boost_USE_STATIC_LIBS=ON \
    -D CMAKE_BUILD_TYPE=Release \
    -D EIGEN3_INCLUDE_DIR=${DEPS}/include/eigen3 \
    -D ZLIB_LIBRARY=${DEPS}/lib/libz.a \
    -D ZLIB_INCLUDE_DIR=${DEPS}/include \
    -D SWIG_EXECUTABLE=${DEPS}/bin/swig \
    -D SWIG_DIR=${DEPS}/share/swig/${SWIG_VERSION} \
    -D CAIRO_INCLUDE_DIR=${DEPS}/include/cairo \
    -D CAIRO_LIBRARY_DIR=${DEPS}/lib \
    -D CMAKE_INSTALL_PREFIX=${IMAGE} \
    ..
RUN source ${DEVTOOLSET_PATH}/enable && make -j${BUILD_CONCURRENCY} && make -j${BUILD_CONCURRENCY} install
RUN RDBASE=${SRC}/rdkit ${DEPS}/bin/ctest

FROM scratch as export-stage
ARG ARCH
ARG SRC
ARG RDKIT_RELEASE
COPY --from=build-stage ${SRC}/rdkit/Code/JavaWrappers/gmwrapper/org.RDKit.jar /${ARCH}/org.RDKit.jar
COPY --from=build-stage ${SRC}/rdkit/Code/JavaWrappers/gmwrapper/org.RDKitDoc.jar /${ARCH}/org.RDKitDoc.jar
COPY --from=build-stage ${SRC}/rdkit/Code/JavaWrappers/gmwrapper/libGraphMolWrap.so /${ARCH}/libGraphMolWrap.so
COPY --from=build-stage ${SRC}/rdkit/Code/JavaWrappers/csharp_wrapper/RDKFuncs.so /${ARCH}/RDKFuncs.so
COPY --from=build-stage ${SRC}/rdkit/Code/JavaWrappers/csharp_wrapper/RDKit2DotNet.dll /${ARCH}/RDKit2DotNet.dll
